{"ast":null,"code":"/**\n * There are lots of reducer functions: \n *      They will return a new state according to old state and specified action\n */\nimport { combineReducers } from 'redux';\nimport { AUTH_SUCCESS, ERROR_MSG, RECEIVE_USER, RESET_USER, RECEIVE_USER_LIST, RECEIVE_MSG_LIST, RECEIVE_MSG, MSG_READ } from './action-types';\nimport { getRedirectTo } from '../utils';\nconst initUser = {\n  username: '',\n  // username\n  type: '',\n  // type\n  msg: '',\n  // error info\n  redirectTo: '' // need auto redirect router path\n\n};\n/**\n * produce user\n */\n\nfunction user1() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initUser;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case AUTH_SUCCESS:\n      // data is user\n      const {\n        type,\n        header\n      } = action.data;\n      return { ...action.data,\n        redirectTo: getRedirectTo(type, header)\n      };\n\n    case ERROR_MSG:\n      // data is msg\n      return { ...state,\n        msg: action.data\n      };\n\n    case RECEIVE_USER:\n      // data is user\n      return action.data;\n\n    case RESET_USER:\n      // data is msg\n      return { ...initUser,\n        msg: action.data\n      };\n    // use initUser here to ensure return back to login page\n\n    default:\n      return state;\n  }\n}\n/**\n * produce user list\n */\n\n\nconst initUserList = [];\n\nfunction userList1() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initUserList;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case RECEIVE_USER_LIST:\n      // data is userList\n      return action.data;\n\n    default:\n      return state;\n  }\n}\n/**\n * produce chat status reducer\n */\n\n\nconst initChat = {\n  users: {},\n  // all users, attr name: userId, attr value: {username, header}\n  chatMsgs: [],\n  // current msg arrays\n  unReadCount: 0 // totally unread count\n\n};\n\nfunction chat1() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initChat;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case RECEIVE_MSG_LIST:\n      const {\n        users,\n        chatMsgs,\n        userId\n      } = action.data;\n      return {\n        users,\n        chatMsgs,\n        unReadCount: chatMsgs.reduce((preTotal, msg) => preTotal + (!msg.read && msg.to === userId ? 1 : 0), 0)\n      };\n\n    case RECEIVE_MSG:\n      // data: chatMsg\n      const {\n        chatMsg\n      } = action.data;\n      return {\n        users: state.users,\n        chatMsgs: [...state.chatMsgs, chatMsg],\n        unReadCount: state.unReadCount + (!chatMsg.read && chatMsg.to === action.data.userId ? 1 : 0)\n      };\n\n    case MSG_READ:\n      const {\n        from,\n        to,\n        count\n      } = action.data;\n      return {\n        users: state.users,\n        chatMsgs: state.chatMsgs.map(msg => {\n          if (msg.from === from && msg.to === to && !msg.read) {\n            msg.read = true;\n            return { ...msg,\n              read: true\n            }; // !!!\n          } else {\n            return msg;\n          }\n        }),\n        unReadCount: state.unReadCount - count\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default combineReducers({\n  user1,\n  userList1,\n  chat1\n});\n/**\n * to export state's structure: {user1:{}, userList1:[], chat:{}}\n */","map":{"version":3,"sources":["/Users/stewardsun/Desktop/技术栈/React项目/Boss Recruitment/bob-recruitment-client/src/redux/reducers.js"],"names":["combineReducers","AUTH_SUCCESS","ERROR_MSG","RECEIVE_USER","RESET_USER","RECEIVE_USER_LIST","RECEIVE_MSG_LIST","RECEIVE_MSG","MSG_READ","getRedirectTo","initUser","username","type","msg","redirectTo","user1","state","action","header","data","initUserList","userList1","initChat","users","chatMsgs","unReadCount","chat1","userId","reduce","preTotal","read","to","chatMsg","from","count","map"],"mappings":"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","sourcesContent":["/**\n * There are lots of reducer functions: \n *      They will return a new state according to old state and specified action\n */\nimport { combineReducers } from 'redux'\nimport {\n    AUTH_SUCCESS,\n    ERROR_MSG,\n    RECEIVE_USER,\n    RESET_USER,\n    RECEIVE_USER_LIST,\n    RECEIVE_MSG_LIST,\n    RECEIVE_MSG,\n    MSG_READ\n} from './action-types'\n\nimport { getRedirectTo } from '../utils'\nconst initUser = {\n    username: '', // username\n    type: '',     // type\n    msg: '',      // error info\n    redirectTo: '', // need auto redirect router path\n}\n/**\n * produce user\n */\nfunction user1(state = initUser, action) {\n    switch (action.type) {\n        case AUTH_SUCCESS: // data is user\n            const { type, header } = action.data\n            return { ...action.data, redirectTo: getRedirectTo(type, header) };\n        case ERROR_MSG:    // data is msg\n            return { ...state, msg: action.data };\n        case RECEIVE_USER:    // data is user\n            return action.data;\n        case RESET_USER:    // data is msg\n            return { ...initUser, msg: action.data }; // use initUser here to ensure return back to login page\n        default:\n            return state;\n    }\n}\n/**\n * produce user list\n */\nconst initUserList = [];\nfunction userList1(state = initUserList, action) {\n    switch (action.type) {\n        case RECEIVE_USER_LIST: // data is userList\n            return action.data;\n        default:\n            return state;\n    }\n}\n\n/**\n * produce chat status reducer\n */\nconst initChat = {\n    users: {},     // all users, attr name: userId, attr value: {username, header}\n    chatMsgs: [],  // current msg arrays\n    unReadCount: 0 // totally unread count\n}\nfunction chat1(state = initChat, action) {\n    switch (action.type) {\n        case RECEIVE_MSG_LIST:\n            const { users, chatMsgs, userId } = action.data;\n            return {\n                users,\n                chatMsgs,\n                unReadCount: chatMsgs.reduce((preTotal, msg) => preTotal + (!msg.read && msg.to === userId ? 1 : 0), 0)\n            }\n        case RECEIVE_MSG: // data: chatMsg\n            const { chatMsg } = action.data;\n            return {\n                users: state.users,\n                chatMsgs: [...state.chatMsgs, chatMsg],\n                unReadCount: state.unReadCount + (!chatMsg.read && chatMsg.to === action.data.userId ? 1 : 0)\n            }\n        case MSG_READ:\n            const { from, to, count } = action.data;\n            return {\n                users: state.users,\n                chatMsgs: state.chatMsgs.map(msg => {\n                    if (msg.from === from && msg.to === to && !msg.read) {\n                        msg.read = true;\n                        return { ...msg, read: true }; // !!!\n                    } else {\n                        return msg;\n                    }\n                }),\n                unReadCount: state.unReadCount - count\n            }\n        default:\n            return state;\n    }\n}\n\nexport default combineReducers({\n    user1,\n    userList1,\n    chat1\n})\n/**\n * to export state's structure: {user1:{}, userList1:[], chat:{}}\n */\n"]},"metadata":{},"sourceType":"module"}