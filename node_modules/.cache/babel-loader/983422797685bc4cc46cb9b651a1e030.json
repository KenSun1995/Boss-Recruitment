{"ast":null,"code":"/**\n * There are lots of action creator:\n *      synchronized action\n *      asynchronized action\n */\nimport { reqRegister, reqLogin } from '../api';\nimport { AUTH_SUCCESS, ERROR_MSG } from './action-types';\n/**\n * auth success sync action\n */\n\nconst authSuccess = user => ({\n  type: AUTH_SUCCESS,\n  data: user\n});\n/**\n * msg info sync action\n */\n\n\nconst errorMsg = msg => ({\n  type: ERROR_MSG,\n  data: msg\n});\n/**\n * register\n */\n\n\nexport const register = user => {\n  const {\n    username,\n    password,\n    password2,\n    type\n  } = user; // do validation before send request\n\n  if (!username) {\n    return errorMsg('you have to enter username');\n  }\n\n  if (password !== password2) {\n    return errorMsg('two time passwords should be the same');\n  }\n\n  if (!password || !password2) {\n    return errorMsg('passwords must be entered');\n  } // form data is valid\n\n\n  return async dispatch => {\n    // send register asyn request\n    const response = await reqRegister({\n      username,\n      password,\n      type\n    });\n    const result = response.data;\n\n    if (result.code === 0) {\n      // success\n      // dispatch success action\n      dispatch(authSuccess(result.data));\n    } else {\n      // fail\n      // dispatch fail action\n      dispatch(errorMsg(result.msg));\n    }\n  };\n};\n/**\n * login\n */\n\nexport const login = user => {\n  console.log(user);\n  const {\n    username,\n    password\n  } = user; // do validation before send request\n\n  if (!username) {\n    return errorMsg('you have to enter username');\n  }\n\n  if (!password) {\n    return errorMsg('password should be the entering');\n  }\n\n  return async dispatch => {\n    // send login asyn request\n    const response = await reqLogin(user);\n    const result = response.data;\n\n    if (result.code === 0) {\n      // success\n      // dispatch success action\n      dispatch(authSuccess(result.data));\n    } else {\n      // fail\n      // dispatch fail action\n      dispatch(errorMsg(result.msg));\n    }\n  };\n};","map":{"version":3,"sources":["/Users/stewardsun/Desktop/技术栈/React项目/Boss Recruitment/bob-recruitment-client/src/redux/actions.js"],"names":["reqRegister","reqLogin","AUTH_SUCCESS","ERROR_MSG","authSuccess","user","type","data","errorMsg","msg","register","username","password","password2","dispatch","response","result","code","login","console","log"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,QAAtC;AACA,SAASC,YAAT,EAAuBC,SAAvB,QAAwC,gBAAxC;AACA;AACA;AACA;;AACA,MAAMC,WAAW,GAAIC,IAAD,KAAW;AAAEC,EAAAA,IAAI,EAAEJ,YAAR;AAAsBK,EAAAA,IAAI,EAAEF;AAA5B,CAAX,CAApB;AACA;AACA;AACA;;;AACA,MAAMG,QAAQ,GAAIC,GAAD,KAAU;AAAEH,EAAAA,IAAI,EAAEH,SAAR;AAAmBI,EAAAA,IAAI,EAAEE;AAAzB,CAAV,CAAjB;AACA;AACA;AACA;;;AACA,OAAO,MAAMC,QAAQ,GAAIL,IAAD,IAAU;AAC9B,QAAM;AAACM,IAAAA,QAAD;AAAWC,IAAAA,QAAX;AAAqBC,IAAAA,SAArB;AAAgCP,IAAAA;AAAhC,MAAwCD,IAA9C,CAD8B,CAE9B;;AACA,MAAG,CAACM,QAAJ,EAAa;AACT,WAAOH,QAAQ,CAAC,4BAAD,CAAf;AACH;;AACD,MAAGI,QAAQ,KAAKC,SAAhB,EAA0B;AACtB,WAAOL,QAAQ,CAAC,uCAAD,CAAf;AACH;;AACD,MAAG,CAACI,QAAD,IAAa,CAACC,SAAjB,EAA2B;AACvB,WAAOL,QAAQ,CAAC,2BAAD,CAAf;AACH,GAX6B,CAY9B;;;AACA,SAAO,MAAMM,QAAN,IAAkB;AACrB;AACA,UAAMC,QAAQ,GAAG,MAAMf,WAAW,CAAC;AAACW,MAAAA,QAAD;AAAWC,MAAAA,QAAX;AAAqBN,MAAAA;AAArB,KAAD,CAAlC;AACA,UAAMU,MAAM,GAAGD,QAAQ,CAACR,IAAxB;;AACA,QAAIS,MAAM,CAACC,IAAP,KAAgB,CAApB,EAAuB;AAAE;AACrB;AACAH,MAAAA,QAAQ,CAACV,WAAW,CAACY,MAAM,CAACT,IAAR,CAAZ,CAAR;AACH,KAHD,MAGO;AAAE;AACL;AACAO,MAAAA,QAAQ,CAACN,QAAQ,CAACQ,MAAM,CAACP,GAAR,CAAT,CAAR;AACH;AACJ,GAXD;AAYH,CAzBM;AA2BP;AACA;AACA;;AACA,OAAO,MAAMS,KAAK,GAAIb,IAAD,IAAU;AAC3Bc,EAAAA,OAAO,CAACC,GAAR,CAAYf,IAAZ;AACA,QAAM;AAACM,IAAAA,QAAD;AAAWC,IAAAA;AAAX,MAAuBP,IAA7B,CAF2B,CAG3B;;AACA,MAAG,CAACM,QAAJ,EAAa;AACT,WAAOH,QAAQ,CAAC,4BAAD,CAAf;AACH;;AACD,MAAG,CAACI,QAAJ,EAAa;AACT,WAAOJ,QAAQ,CAAC,iCAAD,CAAf;AACH;;AACD,SAAO,MAAMM,QAAN,IAAkB;AACrB;AACA,UAAMC,QAAQ,GAAG,MAAMd,QAAQ,CAACI,IAAD,CAA/B;AACA,UAAMW,MAAM,GAAGD,QAAQ,CAACR,IAAxB;;AACA,QAAIS,MAAM,CAACC,IAAP,KAAgB,CAApB,EAAuB;AAAE;AACrB;AACAH,MAAAA,QAAQ,CAACV,WAAW,CAACY,MAAM,CAACT,IAAR,CAAZ,CAAR;AACH,KAHD,MAGO;AAAE;AACL;AACAO,MAAAA,QAAQ,CAACN,QAAQ,CAACQ,MAAM,CAACP,GAAR,CAAT,CAAR;AACH;AACJ,GAXD;AAYH,CAtBM","sourcesContent":["/**\n * There are lots of action creator:\n *      synchronized action\n *      asynchronized action\n */\nimport { reqRegister, reqLogin } from '../api'\nimport { AUTH_SUCCESS, ERROR_MSG } from './action-types'\n/**\n * auth success sync action\n */\nconst authSuccess = (user) => ({ type: AUTH_SUCCESS, data: user });\n/**\n * msg info sync action\n */\nconst errorMsg = (msg) => ({ type: ERROR_MSG, data: msg });\n/**\n * register\n */\nexport const register = (user) => {\n    const {username, password, password2, type} = user;\n    // do validation before send request\n    if(!username){\n        return errorMsg('you have to enter username');\n    }\n    if(password !== password2){\n        return errorMsg('two time passwords should be the same');\n    }\n    if(!password || !password2){\n        return errorMsg('passwords must be entered');\n    }\n    // form data is valid\n    return async dispatch => {\n        // send register asyn request\n        const response = await reqRegister({username, password, type});\n        const result = response.data;\n        if (result.code === 0) { // success\n            // dispatch success action\n            dispatch(authSuccess(result.data));\n        } else { // fail\n            // dispatch fail action\n            dispatch(errorMsg(result.msg));\n        }\n    }\n}\n\n/**\n * login\n */\nexport const login = (user) => {\n    console.log(user);\n    const {username, password} = user;\n    // do validation before send request\n    if(!username){\n        return errorMsg('you have to enter username');\n    }\n    if(!password){\n        return errorMsg('password should be the entering');\n    }\n    return async dispatch => {\n        // send login asyn request\n        const response = await reqLogin(user);\n        const result = response.data;\n        if (result.code === 0) { // success\n            // dispatch success action\n            dispatch(authSuccess(result.data));\n        } else { // fail\n            // dispatch fail action\n            dispatch(errorMsg(result.msg));\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}