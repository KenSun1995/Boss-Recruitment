{"ast":null,"code":"/**\n * There are lots of reducer functions: \n *      They will return a new state according to old state and specified action\n */\nimport { combineReducers } from 'redux';\nimport { AUTH_SUCCESS, ERROR_MSG } from './action-types';\nconst initUser = {\n  username: '',\n  // username\n  type: '',\n  // type\n  msg: '',\n  // error info\n  redirectTo: '' // need auto redirect router path\n\n};\n/**\n * \n */\n\nfunction user1() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initUser;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case AUTH_SUCCESS:\n      // data is user\n      return { ...action.data,\n        redirectTo: '/'\n      };\n\n    case ERROR_MSG:\n      // data is msg\n      return { ...state,\n        msg: action.data\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default combineReducers({\n  user1\n});\n/**\n * to export state's structure: {user1:{}}\n */\n\n/**\n * router:\n * /boss\n * /expert\n * /bossInfo\n * /expertInfo\n *\n */","map":{"version":3,"sources":["/Users/stewardsun/Desktop/技术栈/React项目/Boss Recruitment/bob-recruitment-client/src/redux/reducers.js"],"names":["combineReducers","AUTH_SUCCESS","ERROR_MSG","initUser","username","type","msg","redirectTo","user1","state","action","data"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,eAAT,QAAgC,OAAhC;AACA,SAASC,YAAT,EAAuBC,SAAvB,QAAwC,gBAAxC;AAEA,MAAMC,QAAQ,GAAG;AACbC,EAAAA,QAAQ,EAAE,EADG;AACC;AACdC,EAAAA,IAAI,EAAE,EAFO;AAEC;AACdC,EAAAA,GAAG,EAAE,EAHQ;AAGC;AACdC,EAAAA,UAAU,EAAE,EAJC,CAIG;;AAJH,CAAjB;AAMA;AACA;AACA;;AACA,SAASC,KAAT,GAAyC;AAAA,MAA1BC,KAA0B,uEAAlBN,QAAkB;AAAA,MAARO,MAAQ;;AACrC,UAAQA,MAAM,CAACL,IAAf;AACI,SAAKJ,YAAL;AAAmB;AACf,aAAO,EAAE,GAAGS,MAAM,CAACC,IAAZ;AAAkBJ,QAAAA,UAAU,EAAE;AAA9B,OAAP;;AACJ,SAAKL,SAAL;AAAmB;AACf,aAAO,EAAE,GAAGO,KAAL;AAAYH,QAAAA,GAAG,EAAEI,MAAM,CAACC;AAAxB,OAAP;;AACJ;AACI,aAAOF,KAAP;AANR;AAQH;;AAED,eAAeT,eAAe,CAAC;AAC3BQ,EAAAA;AAD2B,CAAD,CAA9B;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/**\n * There are lots of reducer functions: \n *      They will return a new state according to old state and specified action\n */\nimport { combineReducers } from 'redux'\nimport { AUTH_SUCCESS, ERROR_MSG } from './action-types'\n\nconst initUser = {\n    username: '', // username\n    type: '',     // type\n    msg: '',      // error info\n    redirectTo: '', // need auto redirect router path\n}\n/**\n * \n */\nfunction user1(state = initUser, action) {\n    switch (action.type) {\n        case AUTH_SUCCESS: // data is user\n            return { ...action.data, redirectTo: '/' };\n        case ERROR_MSG:    // data is msg\n            return { ...state, msg: action.data };\n        default:\n            return state;\n    }\n}\n\nexport default combineReducers({\n    user1\n})\n/**\n * to export state's structure: {user1:{}}\n */\n\n/**\n * router:\n * /boss\n * /expert\n * /bossInfo\n * /expertInfo\n *\n */"]},"metadata":{},"sourceType":"module"}