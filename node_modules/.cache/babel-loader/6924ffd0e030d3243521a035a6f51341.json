{"ast":null,"code":"import \"antd-mobile/es/badge/style\";\nimport _Badge from \"antd-mobile/es/badge\";\nimport \"antd-mobile/es/list/style\";\nimport _List from \"antd-mobile/es/list\";\nvar _jsxFileName = \"/Users/stewardsun/Desktop/\\u6280\\u672F\\u6808/React\\u9879\\u76EE/Boss Recruitment/bob-recruitment-client/src/containers/message/message.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Item = _List.Item;\nconst Brief = Item.Brief;\n/**\n *  group chatMsgs by chat_id, get last item\n * 1. find out last msg for each chat, and store it by obj container {chat_id: lastMsgs}\n * 2. get all array of lastMsgs\n * 3. sort the array by (create_time desc)\n */\n\nfunction getLastMsgs(chatMsgs, userId) {\n  const lastMsgObjs = {};\n  chatMsgs.forEach(msg => {\n    if (msg.to === userId && !msg.read) {\n      msg.unReadCount = 1; // just is a flag: 0 or 1\n    } else {\n      msg.unReadCount = 0;\n    }\n\n    const chatId = msg.chat_id;\n    const lastMsg = lastMsgObjs[chatId];\n\n    if (!lastMsg) {\n      lastMsgObjs[chatId] = msg;\n    } else {\n      // save already count the number\n      const unReadCount = lastMsg.unReadCount;\n\n      if (msg.create_time > lastMsg.create_time) {\n        lastMsgObjs[chatId] = msg;\n      }\n\n      lastMsgObjs[chatId].unReadCount = unReadCount + msg.unReadCount;\n    }\n  });\n  let lastMsgs = Object.values(lastMsgObjs); // lastMsgObjs is obj container, to get array with all values\n\n  lastMsgs.sort((m1, m2) => {\n    // if result < 0, put m1 first, if result = 0, don't do anything, if result > 0, put m2 first\n    return m2.create_time - m1.create_time;\n  });\n  return lastMsgs;\n}\n\nclass Message extends Component {\n  render() {\n    const {\n      user\n    } = this.props;\n    const {\n      users,\n      chatMsgs\n    } = this.props.chat;\n    console.log('state.chatMsgs: ', chatMsgs);\n    const lastMsgs = getLastMsgs(chatMsgs, user._id);\n    console.log('lastMsgs: ', lastMsgs);\n    return /*#__PURE__*/_jsxDEV(_List, {\n      style: {\n        marginTop: 50,\n        marginBottom: 40\n      },\n      children: lastMsgs.map(msg => {\n        const targetUserId = msg.to === user._id ? msg.from : msg.to;\n        const targetUser = users[targetUserId];\n        return /*#__PURE__*/_jsxDEV(Item, {\n          extra: /*#__PURE__*/_jsxDEV(_Badge, {\n            text: msg.unReadCount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 40\n          }, this),\n          thumb: targetUser.header ? require(`../../assets/img/${targetUser.header}.png`).default : null,\n          arrow: \"horizontal\",\n          onClick: () => this.props.history.push(`/chat/${targetUserId}`),\n          children: [msg.content, /*#__PURE__*/_jsxDEV(Brief, {\n            children: targetUser.username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 33\n          }, this)]\n        }, msg._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default connect(state => ({\n  user: state.user1,\n  chat: state.chat1\n}), {})(Message);","map":{"version":3,"sources":["/Users/stewardsun/Desktop/技术栈/React项目/Boss Recruitment/bob-recruitment-client/src/containers/message/message.jsx"],"names":["React","Component","connect","Item","Brief","getLastMsgs","chatMsgs","userId","lastMsgObjs","forEach","msg","to","read","unReadCount","chatId","chat_id","lastMsg","create_time","lastMsgs","Object","values","sort","m1","m2","Message","render","user","props","users","chat","console","log","_id","marginTop","marginBottom","map","targetUserId","from","targetUser","header","require","default","history","push","content","username","state","user1","chat1"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { List, Badge } from 'antd-mobile'\nconst Item = List.Item\nconst Brief = Item.Brief\n\n/**\n *  group chatMsgs by chat_id, get last item\n * 1. find out last msg for each chat, and store it by obj container {chat_id: lastMsgs}\n * 2. get all array of lastMsgs\n * 3. sort the array by (create_time desc)\n */\nfunction getLastMsgs(chatMsgs, userId) {\n    const lastMsgObjs = {};\n    chatMsgs.forEach(msg => {\n        if (msg.to === userId && !msg.read) {\n            msg.unReadCount = 1; // just is a flag: 0 or 1\n        } else {\n            msg.unReadCount = 0;\n        }\n        const chatId = msg.chat_id;\n        const lastMsg = lastMsgObjs[chatId];\n        if (!lastMsg) {\n            lastMsgObjs[chatId] = msg;\n        } else {\n            // save already count the number\n            const unReadCount = lastMsg.unReadCount;\n            if (msg.create_time > lastMsg.create_time) {\n                lastMsgObjs[chatId] = msg;\n            }\n            lastMsgObjs[chatId].unReadCount = unReadCount + msg.unReadCount;\n        }\n    })\n    let lastMsgs = Object.values(lastMsgObjs); // lastMsgObjs is obj container, to get array with all values\n    lastMsgs.sort((m1, m2) => { // if result < 0, put m1 first, if result = 0, don't do anything, if result > 0, put m2 first\n        return m2.create_time - m1.create_time\n    });\n    return lastMsgs;\n}\n\nclass Message extends Component {\n\n    render() {\n        const { user } = this.props;\n        const { users, chatMsgs } = this.props.chat;\n        console.log('state.chatMsgs: ', chatMsgs);\n        const lastMsgs = getLastMsgs(chatMsgs, user._id);\n        console.log('lastMsgs: ', lastMsgs);\n        return (\n            <List style={{ marginTop: 50, marginBottom: 40 }}>\n                {\n                    lastMsgs.map(msg => {\n                        const targetUserId = msg.to === user._id ? msg.from : msg.to;\n                        const targetUser = users[targetUserId];\n                        return (\n                            <Item\n                                key={msg._id}\n                                extra={<Badge text={msg.unReadCount} />}\n                                thumb={targetUser.header ? require(`../../assets/img/${targetUser.header}.png`).default : null}\n                                arrow='horizontal'\n                                onClick={() => this.props.history.push(`/chat/${targetUserId}`)}\n                            >\n                                {msg.content}\n                                <Brief>{targetUser.username}</Brief>\n                            </Item>\n                        )\n                    })\n                }\n            </List>\n        )\n    }\n}\nexport default connect(\n    state => ({ user: state.user1, chat: state.chat1 }),\n    {}\n)(Message)"]},"metadata":{},"sourceType":"module"}