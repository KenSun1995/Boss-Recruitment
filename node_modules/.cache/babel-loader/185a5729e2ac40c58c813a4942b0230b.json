{"ast":null,"code":"/**\n * There are lots of action creator:\n *      synchronized action\n *      asynchronized action\n */\nimport io from 'socket.io-client';\nimport { reqRegister, reqLogin, reqUpdateUser, reqUser, reqUserList, reqChatMsgList } from '../api';\nimport { AUTH_SUCCESS, ERROR_MSG, RECEIVE_USER, RESET_USER, RECEIVE_USER_LIST } from './action-types';\n/**\n * single example obj\n * 1. before creating obj: check obj is created or not, only create it if not\n * 2. after creating obj: save obj\n */\n\nfunction initIO() {\n  if (!io.socket) {\n    // connect server, get socket obj\n    io.socket = io('ws://localhost:4000', {\n      transports: ['websocket']\n    }); // bind 'receiveMessage' monitor, to receive msg from server\n\n    io.socket.on('receiveMsg', function (chatMsg) {\n      console.log('Browser received msg:', chatMsg);\n    });\n  }\n}\n/**\n * async get msg list data\n */\n\n\nasync function getMsgList() {\n  const response = await reqChatMsgList();\n}\n/**\n * async send msg in chat\n */\n\n\nexport const sendMsg = _ref => {\n  let {\n    from,\n    to,\n    content\n  } = _ref;\n  return dispatch => {\n    console.log('send msg:', {\n      from,\n      to,\n      content\n    });\n    initIO();\n    io.socket.emit('sendMsg', {\n      from,\n      to,\n      content\n    });\n  };\n};\n/**\n * auth success sync action\n */\n\nconst authSuccess = user => ({\n  type: AUTH_SUCCESS,\n  data: user\n});\n/**\n * msg info sync action\n */\n\n\nconst errorMsg = msg => ({\n  type: ERROR_MSG,\n  data: msg\n});\n/**\n * receive  user sync action\n */\n\n\nconst receiveUser = user => ({\n  type: RECEIVE_USER,\n  data: user\n});\n/**\n * reset user sync action\n */\n\n\nexport const resetUser = msg => ({\n  type: RESET_USER,\n  data: msg\n});\n/**\n * received user list sync action\n */\n\nexport const receivedUserList = userList => ({\n  type: RECEIVE_USER_LIST,\n  data: userList\n});\n/**\n * register\n */\n\nexport const register = user => {\n  const {\n    username,\n    password,\n    password2,\n    type\n  } = user; // do validation before send request\n\n  if (!username) {\n    return errorMsg('you have to enter username');\n  }\n\n  if (password !== password2) {\n    return errorMsg('two time passwords should be the same');\n  }\n\n  if (!password || !password2) {\n    return errorMsg('passwords must be entered');\n  } // form data is valid\n\n\n  return async dispatch => {\n    // send register asyn request\n    const response = await reqRegister({\n      username,\n      password,\n      type\n    });\n    const result = response.data;\n\n    if (result.code === 0) {\n      // success\n      getMsgList(); // dispatch success action\n\n      dispatch(authSuccess(result.data));\n    } else {\n      // fail\n      // dispatch fail action\n      dispatch(errorMsg(result.msg));\n    }\n  };\n};\n/**\n * login\n */\n\nexport const login = user => {\n  const {\n    username,\n    password\n  } = user; // do validation before send request\n\n  if (!username) {\n    return errorMsg('you have to enter username');\n  }\n\n  if (!password) {\n    return errorMsg('password should be the entering');\n  }\n\n  return async dispatch => {\n    // send login asyn request\n    const response = await reqLogin(user);\n    const result = response.data;\n\n    if (result.code === 0) {\n      // success\n      getMsgList(); // dispatch success action\n\n      dispatch(authSuccess(result.data));\n    } else {\n      // fail\n      // dispatch fail action\n      dispatch(errorMsg(result.msg));\n    }\n  };\n};\n/**\n * update\n */\n\nexport const update = user => {\n  return async dispatch => {\n    const response = await reqUpdateUser(user);\n    const result = response.data;\n\n    if (result.code === 0) {\n      // success\n      dispatch(receiveUser(result.data));\n    } else {\n      // fail\n      dispatch(resetUser(result.msg));\n    }\n  };\n};\n/**\n * get userInfo according to cookie\n */\n\nexport const getUser = () => {\n  return async dispatch => {\n    const response = await reqUser();\n    const result = response.data;\n\n    if (result.code === 0) {\n      getMsgList();\n      dispatch(receiveUser(result.data));\n    } else {\n      dispatch(resetUser(result.msg));\n    }\n  };\n};\n/**\n * get userList async action\n */\n\nexport const getUserList = type => {\n  return async dispatch => {\n    const response = await reqUserList(type);\n    const result = response.data;\n\n    if (result.code === 0) {\n      dispatch(receivedUserList(result.data));\n    }\n  };\n};","map":{"version":3,"sources":["/Users/stewardsun/Desktop/技术栈/React项目/Boss Recruitment/bob-recruitment-client/src/redux/actions.js"],"names":["io","reqRegister","reqLogin","reqUpdateUser","reqUser","reqUserList","reqChatMsgList","AUTH_SUCCESS","ERROR_MSG","RECEIVE_USER","RESET_USER","RECEIVE_USER_LIST","initIO","socket","transports","on","chatMsg","console","log","getMsgList","response","sendMsg","from","to","content","dispatch","emit","authSuccess","user","type","data","errorMsg","msg","receiveUser","resetUser","receivedUserList","userList","register","username","password","password2","result","code","login","update","getUser","getUserList"],"mappings":"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","sourcesContent":["/**\n * There are lots of action creator:\n *      synchronized action\n *      asynchronized action\n */\nimport io from 'socket.io-client'\nimport { reqRegister, reqLogin, reqUpdateUser, reqUser, reqUserList, reqChatMsgList } from '../api'\nimport { AUTH_SUCCESS, ERROR_MSG, RECEIVE_USER, RESET_USER, RECEIVE_USER_LIST } from './action-types'\n/**\n * single example obj\n * 1. before creating obj: check obj is created or not, only create it if not\n * 2. after creating obj: save obj\n */\nfunction initIO() {\n    if (!io.socket) {\n        // connect server, get socket obj\n        io.socket = io('ws://localhost:4000', { transports: ['websocket'] })\n        // bind 'receiveMessage' monitor, to receive msg from server\n        io.socket.on('receiveMsg', function (chatMsg) {\n            console.log('Browser received msg:', chatMsg);\n        })\n    }\n}\n/**\n * async get msg list data\n */\nasync function getMsgList() {\n    const response = await reqChatMsgList();\n}\n/**\n * async send msg in chat\n */\nexport const sendMsg = ({ from, to, content }) => {\n    return dispatch => {\n        console.log('send msg:', { from, to, content });\n        initIO();\n        io.socket.emit('sendMsg', { from, to, content })\n    }\n}\n/**\n * auth success sync action\n */\nconst authSuccess = (user) => ({ type: AUTH_SUCCESS, data: user });\n/**\n * msg info sync action\n */\nconst errorMsg = (msg) => ({ type: ERROR_MSG, data: msg });\n/**\n * receive  user sync action\n */\nconst receiveUser = (user) => ({ type: RECEIVE_USER, data: user });\n/**\n * reset user sync action\n */\nexport const resetUser = (msg) => ({ type: RESET_USER, data: msg });\n/**\n * received user list sync action\n */\nexport const receivedUserList = (userList) => ({ type: RECEIVE_USER_LIST, data: userList });\n\n/**\n * register\n */\nexport const register = (user) => {\n    const { username, password, password2, type } = user;\n    // do validation before send request\n    if (!username) {\n        return errorMsg('you have to enter username');\n    }\n    if (password !== password2) {\n        return errorMsg('two time passwords should be the same');\n    }\n    if (!password || !password2) {\n        return errorMsg('passwords must be entered');\n    }\n    // form data is valid\n    return async dispatch => {\n        // send register asyn request\n        const response = await reqRegister({ username, password, type });\n        const result = response.data;\n        if (result.code === 0) { // success\n            getMsgList();\n            // dispatch success action\n            dispatch(authSuccess(result.data));\n        } else { // fail\n            // dispatch fail action\n            dispatch(errorMsg(result.msg));\n        }\n    }\n}\n\n/**\n * login\n */\nexport const login = (user) => {\n    const { username, password } = user;\n    // do validation before send request\n    if (!username) {\n        return errorMsg('you have to enter username');\n    }\n    if (!password) {\n        return errorMsg('password should be the entering');\n    }\n    return async dispatch => {\n        // send login asyn request\n        const response = await reqLogin(user);\n        const result = response.data;\n        if (result.code === 0) { // success\n            getMsgList();\n            // dispatch success action\n            dispatch(authSuccess(result.data));\n        } else { // fail\n            // dispatch fail action\n            dispatch(errorMsg(result.msg));\n        }\n    }\n}\n\n/**\n * update\n */\nexport const update = (user) => {\n    return async dispatch => {\n        const response = await reqUpdateUser(user);\n        const result = response.data;\n        if (result.code === 0) { // success\n            dispatch(receiveUser(result.data));\n        } else { // fail\n            dispatch(resetUser(result.msg));\n        }\n    }\n}\n\n/**\n * get userInfo according to cookie\n */\nexport const getUser = () => {\n    return async dispatch => {\n        const response = await reqUser();\n        const result = response.data;\n        if (result.code === 0) {\n            getMsgList();\n            dispatch(receiveUser(result.data));\n        } else {\n            dispatch(resetUser(result.msg));\n        }\n    }\n}\n\n/**\n * get userList async action\n */\nexport const getUserList = (type) => {\n    return async dispatch => {\n        const response = await reqUserList(type);\n        const result = response.data;\n        if (result.code === 0) {\n            dispatch(receivedUserList(result.data));\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}