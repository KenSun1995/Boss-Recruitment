{"ast":null,"code":"import \"antd-mobile/es/nav-bar/style\";\nimport _NavBar from \"antd-mobile/es/nav-bar\";\nvar _jsxFileName = \"/Users/stewardsun/Desktop/\\u6280\\u672F\\u6808/React\\u9879\\u76EE/Boss Recruitment/bob-recruitment-client/src/containers/main/main.jsx\";\nimport React, { Component } from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Cookies from 'js-cookie'; // enable to operate front-end cookie object set()/remove()\n\nimport BossInfo from '../boss-info/boss-info';\nimport ExpertInfo from '../expert-info/expert-info';\nimport Boss from '../boss/boss';\nimport Expert from '../expert/expert';\nimport Message from '../message/message';\nimport PersonalCenter from '../personal-center/personal-center';\nimport NotFound from '../../components/not-found/not-found';\nimport NavFooter from '../../components/nav-footer/nav-footer';\nimport Chat from '../../containers/chat/chat';\nimport { getRedirectTo } from '../../utils';\nimport { getUser } from '../../redux/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/**\n * main component\n */\nclass Main extends Component {\n  constructor() {\n    super(...arguments);\n    this.navList = [{\n      path: '/boss',\n      component: Boss,\n      title: 'Expert List',\n      icon: 'expert',\n      text: 'Expert'\n    }, {\n      path: '/expert',\n      component: Expert,\n      title: 'Boss List',\n      icon: 'boss',\n      text: 'Boss'\n    }, {\n      path: '/message',\n      component: Message,\n      title: 'Message List',\n      icon: 'message',\n      text: 'Message'\n    }, {\n      path: '/personal-center',\n      component: PersonalCenter,\n      title: 'User Center',\n      icon: 'personal',\n      text: 'Personal'\n    }];\n  }\n\n  componentDidMount() {\n    // logged in, but currently no logged in, send request to get user info\n    const userId = Cookies.get('userId');\n    const {\n      _id\n    } = this.props.user;\n\n    if (userId && !_id) {\n      // send async request\n      this.props.getUser();\n    }\n  }\n\n  render() {\n    // read userId from cookie, \n    // if no, redirect to login page\n    // if yes, get user status of redux, \n    //      if there is no _id in user, return null (don't do any reaction)\n    //      if there is _id in user, show relevant page, according to user's type and header to calculate a redirect path, and auto redirect it\n    const userId = Cookies.get('userId');\n\n    if (!userId) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: '/login'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 20\n      }, this);\n    }\n\n    const {\n      user,\n      unReadCount\n    } = this.props;\n\n    if (!user._id) {\n      return null;\n    } else {\n      let path = this.props.location.pathname;\n\n      if (path === '/') {\n        path = getRedirectTo(user.type, user.header);\n        return /*#__PURE__*/_jsxDEV(Redirect, {\n          to: path\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 24\n        }, this);\n      }\n    }\n\n    const {\n      navList\n    } = this;\n    const path = this.props.location.pathname;\n    const currentNav = navList.find(nav => {\n      // maybe true or false\n      return nav.path === path;\n    });\n\n    if (currentNav) {\n      // decide to hide some item\n      if (user.type === 'boss') {\n        navList[1].hide = true;\n      } else {\n        navList[0].hide = true;\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [currentNav ? /*#__PURE__*/_jsxDEV(_NavBar, {\n        className: \"sticky-header\",\n        children: currentNav.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 31\n      }, this) : null, /*#__PURE__*/_jsxDEV(Switch, {\n        children: [navList.map(nav => /*#__PURE__*/_jsxDEV(Route, {\n          path: nav.path,\n          component: nav.component\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 44\n        }, this)), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/bossInfo\",\n          component: BossInfo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/expertInfo\",\n          component: ExpertInfo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/chat/:userId\",\n          component: Chat\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          component: NotFound\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this), currentNav ? /*#__PURE__*/_jsxDEV(NavFooter, {\n        navList: navList,\n        unReadCount: unReadCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 31\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default connect(state => ({\n  user: state.user1,\n  unReadCount: state.chat1.unReadCount\n}), {\n  getUser\n})(Main);\n/**\n * need to implement login automatic\n * * 1. if cookie includes userId (login in the past but right now no), send request to get user, don't do any perform temporary\n * * 2. if cookie doesn't include userId, auto go into login page\n */\n\n/**\n * if already login, if request /\n * * according to user's type and header to calculate a redirect path, and auto redirect it\n * *\n */","map":{"version":3,"sources":["/Users/stewardsun/Desktop/技术栈/React项目/Boss Recruitment/bob-recruitment-client/src/containers/main/main.jsx"],"names":["React","Component","Switch","Route","Redirect","connect","Cookies","BossInfo","ExpertInfo","Boss","Expert","Message","PersonalCenter","NotFound","NavFooter","Chat","getRedirectTo","getUser","Main","navList","path","component","title","icon","text","componentDidMount","userId","get","_id","props","user","render","unReadCount","location","pathname","type","header","currentNav","find","nav","hide","map","state","user1","chat1"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Switch, Route, Redirect } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport Cookies from 'js-cookie' // enable to operate front-end cookie object set()/remove()\n\nimport BossInfo from '../boss-info/boss-info'\nimport ExpertInfo from '../expert-info/expert-info'\nimport Boss from '../boss/boss'\nimport Expert from '../expert/expert'\nimport Message from '../message/message'\nimport PersonalCenter from '../personal-center/personal-center'\nimport NotFound from '../../components/not-found/not-found'\nimport NavFooter from '../../components/nav-footer/nav-footer'\nimport Chat from '../../containers/chat/chat'\nimport { getRedirectTo } from '../../utils'\nimport { getUser } from '../../redux/actions'\nimport { NavBar } from 'antd-mobile'\n/**\n * main component\n */\nclass Main extends Component {\n\n    // component class and object\n    // add attributes for component object\n    navList = [\n        {\n            path: '/boss',\n            component: Boss,\n            title: 'Expert List',\n            icon: 'expert',\n            text: 'Expert',\n        },\n        {\n            path: '/expert',\n            component: Expert,\n            title: 'Boss List',\n            icon: 'boss',\n            text: 'Boss',\n        },\n        {\n            path: '/message',\n            component: Message,\n            title: 'Message List',\n            icon: 'message',\n            text: 'Message',\n        },\n        {\n            path: '/personal-center',\n            component: PersonalCenter,\n            title: 'User Center',\n            icon: 'personal',\n            text: 'Personal',\n        }\n    ]\n\n    componentDidMount() {\n        // logged in, but currently no logged in, send request to get user info\n        const userId = Cookies.get('userId');\n        const { _id } = this.props.user;\n        if (userId && !_id) {\n            // send async request\n            this.props.getUser();\n        }\n    }\n\n    render() {\n        // read userId from cookie, \n        // if no, redirect to login page\n        // if yes, get user status of redux, \n        //      if there is no _id in user, return null (don't do any reaction)\n        //      if there is _id in user, show relevant page, according to user's type and header to calculate a redirect path, and auto redirect it\n        const userId = Cookies.get('userId');\n        if (!userId) {\n            return <Redirect to={'/login'} />\n        }\n        const { user, unReadCount } = this.props;\n        if (!user._id) {\n            return null;\n        } else {\n            let path = this.props.location.pathname;\n            if (path === '/') {\n                path = getRedirectTo(user.type, user.header);\n                return <Redirect to={path} />\n            }\n        }\n\n        const { navList } = this;\n        const path = this.props.location.pathname;\n        const currentNav = navList.find((nav) => { // maybe true or false\n            return nav.path === path;\n        });\n\n        if (currentNav) {\n            // decide to hide some item\n            if (user.type === 'boss') {\n                navList[1].hide = true;\n            } else {\n                navList[0].hide = true;\n            }\n        }\n\n        return (\n            <div>\n                {currentNav ? <NavBar className='sticky-header'>{currentNav.title}</NavBar> : null}\n                <Switch>\n                    {\n                        navList.map(nav => <Route path={nav.path} component={nav.component} />)\n                    }\n                    <Route path='/bossInfo' component={BossInfo} />\n                    <Route path='/expertInfo' component={ExpertInfo} />\n                    <Route path='/chat/:userId' component={Chat} />\n                    <Route component={NotFound} />\n                </Switch>\n                {currentNav ? <NavFooter navList={navList} unReadCount={unReadCount} /> : null}\n            </div>\n        )\n    }\n}\n\nexport default connect(\n    state => ({ user: state.user1, unReadCount: state.chat1.unReadCount }),\n    { getUser }\n)(Main)\n\n/**\n * need to implement login automatic\n * * 1. if cookie includes userId (login in the past but right now no), send request to get user, don't do any perform temporary\n * * 2. if cookie doesn't include userId, auto go into login page\n */\n/**\n * if already login, if request /\n * * according to user's type and header to calculate a redirect path, and auto redirect it\n * *\n */"]},"metadata":{},"sourceType":"module"}