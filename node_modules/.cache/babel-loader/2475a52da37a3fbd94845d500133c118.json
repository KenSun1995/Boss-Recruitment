{"ast":null,"code":"var _jsxFileName = \"/Users/stewardsun/Desktop/\\u6280\\u672F\\u6808/React\\u9879\\u76EE/Boss Recruitment/bob-recruitment-client/src/containers/main/main.jsx\";\nimport React, { Component } from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Cookies from 'js-cookie'; // enable to operate front-end cookie object set()/remove()\n\nimport BossInfo from '../boss-info/boss-info';\nimport ExpertInfo from '../expert-info/expert-info';\nimport Boss from '../boss/boss';\nimport Expert from '../expert/expert';\nimport Message from '../message/message';\nimport PersonalCenter from '../personal-center/personal-center';\nimport NotFound from '../../components/not-found/not-found';\nimport { getRedirectTo } from '../../utils';\nimport { getUser } from '../../redux/actions';\n/**\n * main component\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Main extends Component {\n  componentDidMount() {\n    // logged in, but currently no logged in, send request to get user info\n    const userId = Cookies.get('userId');\n    const {\n      _id\n    } = this.props.user;\n\n    if (userId && !_id) {\n      // send async request\n      this.props.getUser();\n    }\n  }\n\n  render() {\n    // read userId from cookie, \n    // if no, redirect to login page\n    // if yes, get user status of redux, \n    //      if there is no _id in user, return null (don't do any reaction)\n    //      if there is _id in user, show relevant page, according to user's type and header to calculate a redirect path, and auto redirect it\n    const userId = Cookies.get('userId');\n\n    if (!userId) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: '/login'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 20\n      }, this);\n    }\n\n    const {\n      user\n    } = this.props;\n\n    if (!user._id) {\n      return null;\n    } else {\n      let path = this.props.location.pathname;\n\n      if (path === '/') {\n        path = getRedirectTo(user.type, user.header);\n        return /*#__PURE__*/_jsxDEV(Redirect, {\n          to: path\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 24\n        }, this);\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/bossInfo\",\n          component: BossInfo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/expertInfo\",\n          component: ExpertInfo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Route, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default connect(state => ({\n  user: state.user1\n}), {\n  getUser\n})(Main);\n/**\n * need to implement login automatic\n * * 1. if cookie includes userId (login in the past but right now no), send request to get user, don't do any perform temporary\n * * 2. if cookie doesn't include userId, auto go into login page\n */\n\n/**\n * if already login, if request /\n * * according to user's type and header to calculate a redirect path, and auto redirect it\n * *\n */","map":{"version":3,"sources":["/Users/stewardsun/Desktop/技术栈/React项目/Boss Recruitment/bob-recruitment-client/src/containers/main/main.jsx"],"names":["React","Component","Switch","Route","Redirect","connect","Cookies","BossInfo","ExpertInfo","Boss","Expert","Message","PersonalCenter","NotFound","getRedirectTo","getUser","Main","componentDidMount","userId","get","_id","props","user","render","path","location","pathname","type","header","state","user1"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,QAAxB,QAAwC,kBAAxC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,OAAP,MAAoB,WAApB,C,CAAgC;;AAEhC,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,UAAP,MAAuB,4BAAvB;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AACA,OAAOC,QAAP,MAAqB,sCAArB;AAEA,SAASC,aAAT,QAA8B,aAA9B;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA;AACA;AACA;;;;AACA,MAAMC,IAAN,SAAmBf,SAAnB,CAA6B;AAEzBgB,EAAAA,iBAAiB,GAAG;AAChB;AACA,UAAMC,MAAM,GAAGZ,OAAO,CAACa,GAAR,CAAY,QAAZ,CAAf;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAU,KAAKC,KAAL,CAAWC,IAA3B;;AACA,QAAIJ,MAAM,IAAI,CAACE,GAAf,EAAoB;AAChB;AACA,WAAKC,KAAL,CAAWN,OAAX;AACH;AACJ;;AAEDQ,EAAAA,MAAM,GAAG;AACL;AACA;AACA;AACA;AACA;AACA,UAAML,MAAM,GAAGZ,OAAO,CAACa,GAAR,CAAY,QAAZ,CAAf;;AACA,QAAI,CAACD,MAAL,EAAa;AACT,0BAAO,QAAC,QAAD;AAAU,QAAA,EAAE,EAAE;AAAd;AAAA;AAAA;AAAA;AAAA,cAAP;AACH;;AACD,UAAM;AAAEI,MAAAA;AAAF,QAAW,KAAKD,KAAtB;;AACA,QAAI,CAACC,IAAI,CAACF,GAAV,EAAe;AACX,aAAO,IAAP;AACH,KAFD,MAEO;AACH,UAAII,IAAI,GAAG,KAAKH,KAAL,CAAWI,QAAX,CAAoBC,QAA/B;;AACA,UAAIF,IAAI,KAAK,GAAb,EAAkB;AACdA,QAAAA,IAAI,GAAGV,aAAa,CAACQ,IAAI,CAACK,IAAN,EAAYL,IAAI,CAACM,MAAjB,CAApB;AACA,4BAAO,QAAC,QAAD;AAAU,UAAA,EAAE,EAAEJ;AAAd;AAAA;AAAA;AAAA;AAAA,gBAAP;AACH;AACJ;;AACD,wBACI;AAAA,6BACI,QAAC,MAAD;AAAA,gCACI,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,WAAZ;AAAwB,UAAA,SAAS,EAAEjB;AAAnC;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,aAAZ;AAA0B,UAAA,SAAS,EAAEC;AAArC;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AASH;;AAzCwB;;AA4C7B,eAAeH,OAAO,CAClBwB,KAAK,KAAK;AAAEP,EAAAA,IAAI,EAAEO,KAAK,CAACC;AAAd,CAAL,CADa,EAElB;AAAEf,EAAAA;AAAF,CAFkB,CAAP,CAGbC,IAHa,CAAf;AAKA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component } from 'react'\nimport { Switch, Route, Redirect } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport Cookies from 'js-cookie' // enable to operate front-end cookie object set()/remove()\n\nimport BossInfo from '../boss-info/boss-info'\nimport ExpertInfo from '../expert-info/expert-info'\nimport Boss from '../boss/boss'\nimport Expert from '../expert/expert'\nimport Message from '../message/message'\nimport PersonalCenter from '../personal-center/personal-center'\nimport NotFound from '../../components/not-found/not-found'\n\nimport { getRedirectTo } from '../../utils'\nimport { getUser } from '../../redux/actions'\n/**\n * main component\n */\nclass Main extends Component {\n\n    componentDidMount() {\n        // logged in, but currently no logged in, send request to get user info\n        const userId = Cookies.get('userId');\n        const { _id } = this.props.user;\n        if (userId && !_id) {\n            // send async request\n            this.props.getUser();\n        }\n    }\n\n    render() {\n        // read userId from cookie, \n        // if no, redirect to login page\n        // if yes, get user status of redux, \n        //      if there is no _id in user, return null (don't do any reaction)\n        //      if there is _id in user, show relevant page, according to user's type and header to calculate a redirect path, and auto redirect it\n        const userId = Cookies.get('userId');\n        if (!userId) {\n            return <Redirect to={'/login'} />\n        }\n        const { user } = this.props;\n        if (!user._id) {\n            return null;\n        } else {\n            let path = this.props.location.pathname;\n            if (path === '/') {\n                path = getRedirectTo(user.type, user.header);\n                return <Redirect to={path} />\n            }\n        }\n        return (\n            <div>\n                <Switch>\n                    <Route path='/bossInfo' component={BossInfo} />\n                    <Route path='/expertInfo' component={ExpertInfo} />\n                    <Route />\n                </Switch>\n            </div>\n        )\n    }\n}\n\nexport default connect(\n    state => ({ user: state.user1 }),\n    { getUser }\n)(Main)\n\n/**\n * need to implement login automatic\n * * 1. if cookie includes userId (login in the past but right now no), send request to get user, don't do any perform temporary\n * * 2. if cookie doesn't include userId, auto go into login page\n */\n/**\n * if already login, if request /\n * * according to user's type and header to calculate a redirect path, and auto redirect it\n * *\n */"]},"metadata":{},"sourceType":"module"}