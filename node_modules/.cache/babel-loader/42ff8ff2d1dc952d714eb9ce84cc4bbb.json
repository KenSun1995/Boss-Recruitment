{"ast":null,"code":"var _jsxFileName = \"/Users/stewardsun/Desktop/\\u6280\\u672F\\u6808/React\\u9879\\u76EE/Boss Recruitment/bob-recruitment-client/src/containers/main/main.jsx\";\nimport React, { Component } from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Cookies from 'js-cookie'; // enable to operate front-end cookie object set()/remove()\n\nimport BossInfo from '../boss-info/boss-info';\nimport ExpertInfo from '../expert-info/expert-info';\nimport Boss from '../boss/boss';\nimport Expert from '../expert/expert';\nimport Message from '../message/message';\nimport PersonalCenter from '../personal-center/personal-center';\nimport NotFound from '../../components/not-found/not-found';\nimport { getRedirectTo } from '../../utils';\nimport { getUser } from '../../redux/actions';\n/**\n * main component\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Main extends Component {\n  constructor() {\n    super(...arguments);\n    this.navList = [{\n      path: '/laoban',\n      // 路由路径\n      component: Laoban,\n      title: '大神列表',\n      icon: 'dashen',\n      text: '大神'\n    }, {\n      path: '/dashen',\n      // 路由路径\n      component: Dashen,\n      title: '老板列表',\n      icon: 'laoban',\n      text: '老板'\n    }, {\n      path: '/message',\n      // 路由路径\n      component: Message,\n      title: '消息列表',\n      icon: 'message',\n      text: '消息'\n    }, {\n      path: '/personal',\n      // 路由路径\n      component: Personal,\n      title: '用户中心',\n      icon: 'personal',\n      text: '个人'\n    }];\n  }\n\n  componentDidMount() {\n    // logged in, but currently no logged in, send request to get user info\n    const userId = Cookies.get('userId');\n    const {\n      _id\n    } = this.props.user;\n\n    if (userId && !_id) {\n      // send async request\n      this.props.getUser();\n    }\n  }\n\n  render() {\n    // read userId from cookie, \n    // if no, redirect to login page\n    // if yes, get user status of redux, \n    //      if there is no _id in user, return null (don't do any reaction)\n    //      if there is _id in user, show relevant page, according to user's type and header to calculate a redirect path, and auto redirect it\n    const userId = Cookies.get('userId');\n\n    if (!userId) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: '/login'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 20\n      }, this);\n    }\n\n    const {\n      user\n    } = this.props;\n\n    if (!user._id) {\n      return null;\n    } else {\n      let path = this.props.location.pathname;\n\n      if (path === '/') {\n        path = getRedirectTo(user.type, user.header);\n        return /*#__PURE__*/_jsxDEV(Redirect, {\n          to: path\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 24\n        }, this);\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/bossInfo\",\n          component: BossInfo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/expertInfo\",\n          component: ExpertInfo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          component: NotFound\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default connect(state => ({\n  user: state.user1\n}), {\n  getUser\n})(Main);\n/**\n * need to implement login automatic\n * * 1. if cookie includes userId (login in the past but right now no), send request to get user, don't do any perform temporary\n * * 2. if cookie doesn't include userId, auto go into login page\n */\n\n/**\n * if already login, if request /\n * * according to user's type and header to calculate a redirect path, and auto redirect it\n * *\n */","map":{"version":3,"sources":["/Users/stewardsun/Desktop/技术栈/React项目/Boss Recruitment/bob-recruitment-client/src/containers/main/main.jsx"],"names":["React","Component","Switch","Route","Redirect","connect","Cookies","BossInfo","ExpertInfo","Boss","Expert","Message","PersonalCenter","NotFound","getRedirectTo","getUser","Main","navList","path","component","Laoban","title","icon","text","Dashen","Personal","componentDidMount","userId","get","_id","props","user","render","location","pathname","type","header","state","user1"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Switch, Route, Redirect } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport Cookies from 'js-cookie' // enable to operate front-end cookie object set()/remove()\n\nimport BossInfo from '../boss-info/boss-info'\nimport ExpertInfo from '../expert-info/expert-info'\nimport Boss from '../boss/boss'\nimport Expert from '../expert/expert'\nimport Message from '../message/message'\nimport PersonalCenter from '../personal-center/personal-center'\nimport NotFound from '../../components/not-found/not-found'\nimport { getRedirectTo } from '../../utils'\nimport { getUser } from '../../redux/actions'\n/**\n * main component\n */\nclass Main extends Component {\n\n    // 组件类和组件对象\n    // 给组件对象添加属性\n    navList = [\n        {\n            path: '/laoban', // 路由路径\n            component: Laoban,\n            title: '大神列表',\n            icon: 'dashen',\n            text: '大神',\n        },\n        {\n            path: '/dashen', // 路由路径\n            component: Dashen,\n            title: '老板列表',\n            icon: 'laoban',\n            text: '老板',\n        },\n        {\n            path: '/message', // 路由路径\n            component: Message,\n            title: '消息列表',\n            icon: 'message',\n            text: '消息',\n        },\n        {\n            path: '/personal', // 路由路径\n            component: Personal,\n            title: '用户中心',\n            icon: 'personal',\n            text: '个人',\n        }\n    ]\n\n    componentDidMount() {\n        // logged in, but currently no logged in, send request to get user info\n        const userId = Cookies.get('userId');\n        const { _id } = this.props.user;\n        if (userId && !_id) {\n            // send async request\n            this.props.getUser();\n        }\n    }\n\n    render() {\n        // read userId from cookie, \n        // if no, redirect to login page\n        // if yes, get user status of redux, \n        //      if there is no _id in user, return null (don't do any reaction)\n        //      if there is _id in user, show relevant page, according to user's type and header to calculate a redirect path, and auto redirect it\n        const userId = Cookies.get('userId');\n        if (!userId) {\n            return <Redirect to={'/login'} />\n        }\n        const { user } = this.props;\n        if (!user._id) {\n            return null;\n        } else {\n            let path = this.props.location.pathname;\n            if (path === '/') {\n                path = getRedirectTo(user.type, user.header);\n                return <Redirect to={path} />\n            }\n        }\n        return (\n            <div>\n                <Switch>\n                    <Route path='/bossInfo' component={BossInfo} />\n                    <Route path='/expertInfo' component={ExpertInfo} />\n\n                    <Route component={NotFound} />\n                </Switch>\n            </div>\n        )\n    }\n}\n\nexport default connect(\n    state => ({ user: state.user1 }),\n    { getUser }\n)(Main)\n\n/**\n * need to implement login automatic\n * * 1. if cookie includes userId (login in the past but right now no), send request to get user, don't do any perform temporary\n * * 2. if cookie doesn't include userId, auto go into login page\n */\n/**\n * if already login, if request /\n * * according to user's type and header to calculate a redirect path, and auto redirect it\n * *\n */"]},"metadata":{},"sourceType":"module"}