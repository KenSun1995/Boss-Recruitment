{"ast":null,"code":"/**\n * There are lots of action creator:\n *      synchronized action\n *      asynchronized action\n */\nimport { reqRegister, reqLogin, reqUpdateUser } from '../api';\nimport { AUTH_SUCCESS, ERROR_MSG, RECEIVE_USER, RESET_USER } from './action-types';\n/**\n * auth success sync action\n */\n\nconst authSuccess = user => ({\n  type: AUTH_SUCCESS,\n  data: user\n});\n/**\n * msg info sync action\n */\n\n\nconst errorMsg = msg => ({\n  type: ERROR_MSG,\n  data: msg\n});\n/**\n * receive  user sync action\n */\n\n\nconst receiveUser = user => ({\n  type: RECEIVE_USER,\n  data: user\n});\n/**\n * reset user sync action\n */\n\n\nconst resetUser = user => ({\n  type: RESET_USER,\n  data: user\n});\n/**\n * register\n */\n\n\nexport const register = user => {\n  const {\n    username,\n    password,\n    password2,\n    type\n  } = user; // do validation before send request\n\n  if (!username) {\n    return errorMsg('you have to enter username');\n  }\n\n  if (password !== password2) {\n    return errorMsg('two time passwords should be the same');\n  }\n\n  if (!password || !password2) {\n    return errorMsg('passwords must be entered');\n  } // form data is valid\n\n\n  return async dispatch => {\n    // send register asyn request\n    const response = await reqRegister({\n      username,\n      password,\n      type\n    });\n    const result = response.data;\n\n    if (result.code === 0) {\n      // success\n      // dispatch success action\n      dispatch(authSuccess(result.data));\n    } else {\n      // fail\n      // dispatch fail action\n      dispatch(errorMsg(result.msg));\n    }\n  };\n};\n/**\n * login\n */\n\nexport const login = user => {\n  const {\n    username,\n    password\n  } = user; // do validation before send request\n\n  if (!username) {\n    return errorMsg('you have to enter username');\n  }\n\n  if (!password) {\n    return errorMsg('password should be the entering');\n  }\n\n  return async dispatch => {\n    // send login asyn request\n    const response = await reqLogin(user);\n    const result = response.data;\n\n    if (result.code === 0) {\n      // success\n      // dispatch success action\n      dispatch(authSuccess(result.data));\n    } else {\n      // fail\n      // dispatch fail action\n      dispatch(errorMsg(result.msg));\n    }\n  };\n};\n/**\n * update\n */\n\nexport const update = user => {\n  return async dispatch => {\n    const response = await reqUpdateUser(user);\n    const result = response.data;\n\n    if (result.code === 0) {// success\n    } else {// fail\n    }\n  };\n};","map":{"version":3,"sources":["/Users/stewardsun/Desktop/技术栈/React项目/Boss Recruitment/bob-recruitment-client/src/redux/actions.js"],"names":["reqRegister","reqLogin","reqUpdateUser","AUTH_SUCCESS","ERROR_MSG","RECEIVE_USER","RESET_USER","authSuccess","user","type","data","errorMsg","msg","receiveUser","resetUser","register","username","password","password2","dispatch","response","result","code","login","update"],"mappings":"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","sourcesContent":["/**\n * There are lots of action creator:\n *      synchronized action\n *      asynchronized action\n */\nimport { reqRegister, reqLogin, reqUpdateUser } from '../api'\nimport { AUTH_SUCCESS, ERROR_MSG, RECEIVE_USER, RESET_USER } from './action-types'\n/**\n * auth success sync action\n */\nconst authSuccess = (user) => ({ type: AUTH_SUCCESS, data: user });\n/**\n * msg info sync action\n */\nconst errorMsg = (msg) => ({ type: ERROR_MSG, data: msg });\n/**\n * receive  user sync action\n */\nconst receiveUser = (user) => ({ type: RECEIVE_USER, data: user });\n/**\n * reset user sync action\n */\nconst resetUser = (user) => ({ type: RESET_USER, data: user });\n/**\n * register\n */\nexport const register = (user) => {\n    const { username, password, password2, type } = user;\n    // do validation before send request\n    if (!username) {\n        return errorMsg('you have to enter username');\n    }\n    if (password !== password2) {\n        return errorMsg('two time passwords should be the same');\n    }\n    if (!password || !password2) {\n        return errorMsg('passwords must be entered');\n    }\n    // form data is valid\n    return async dispatch => {\n        // send register asyn request\n        const response = await reqRegister({ username, password, type });\n        const result = response.data;\n        if (result.code === 0) { // success\n            // dispatch success action\n            dispatch(authSuccess(result.data));\n        } else { // fail\n            // dispatch fail action\n            dispatch(errorMsg(result.msg));\n        }\n    }\n}\n\n/**\n * login\n */\nexport const login = (user) => {\n    const { username, password } = user;\n    // do validation before send request\n    if (!username) {\n        return errorMsg('you have to enter username');\n    }\n    if (!password) {\n        return errorMsg('password should be the entering');\n    }\n    return async dispatch => {\n        // send login asyn request\n        const response = await reqLogin(user);\n        const result = response.data;\n        if (result.code === 0) { // success\n            // dispatch success action\n            dispatch(authSuccess(result.data));\n        } else { // fail\n            // dispatch fail action\n            dispatch(errorMsg(result.msg));\n        }\n    }\n}\n\n/**\n * update\n */\nexport const update = (user) => {\n    return async dispatch => {\n        const response = await reqUpdateUser(user);\n        const result = response.data;\n        if (result.code === 0) { // success\n\n        } else { // fail\n\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}