{"ast":null,"code":"/**\n * There are lots of reducer functions: \n *      They will return a new state according to old state and specified action\n */\nimport { combineReducers } from 'redux';\nimport { AUTH_SUCCESS, ERROR_MSG, RECEIVE_USER, RESET_USER } from './action-types';\nimport { getRedirectTo } from '../utils';\nconst initUser = {\n  username: '',\n  // username\n  type: '',\n  // type\n  msg: '',\n  // error info\n  redirectTo: '' // need auto redirect router path\n\n};\n/**\n * \n */\n\nfunction user1() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initUser;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case AUTH_SUCCESS:\n      // data is user\n      const {\n        type,\n        header\n      } = action.data;\n      return { ...action.data,\n        redirectTo: getRedirectTo(type, header)\n      };\n\n    case ERROR_MSG:\n      // data is msg\n      return { ...state,\n        msg: action.data\n      };\n\n    case RECEIVE_USER:\n      // data is user\n      return action.data;\n\n    case RESET_USER:\n      // data is msg\n      return { ...state,\n        msg: action.data\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default combineReducers({\n  user1\n});\n/**\n * to export state's structure: {user1:{}}\n */","map":{"version":3,"sources":["/Users/stewardsun/Desktop/技术栈/React项目/Boss Recruitment/bob-recruitment-client/src/redux/reducers.js"],"names":["combineReducers","AUTH_SUCCESS","ERROR_MSG","RECEIVE_USER","RESET_USER","getRedirectTo","initUser","username","type","msg","redirectTo","user1","state","action","header","data"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,eAAT,QAAgC,OAAhC;AACA,SAASC,YAAT,EAAuBC,SAAvB,EAAkCC,YAAlC,EAAgDC,UAAhD,QAAkE,gBAAlE;AAEA,SAASC,aAAT,QAA8B,UAA9B;AACA,MAAMC,QAAQ,GAAG;AACbC,EAAAA,QAAQ,EAAE,EADG;AACC;AACdC,EAAAA,IAAI,EAAE,EAFO;AAEC;AACdC,EAAAA,GAAG,EAAE,EAHQ;AAGC;AACdC,EAAAA,UAAU,EAAE,EAJC,CAIG;;AAJH,CAAjB;AAMA;AACA;AACA;;AACA,SAASC,KAAT,GAAyC;AAAA,MAA1BC,KAA0B,uEAAlBN,QAAkB;AAAA,MAARO,MAAQ;;AACrC,UAAQA,MAAM,CAACL,IAAf;AACI,SAAKP,YAAL;AAAmB;AACf,YAAM;AAAEO,QAAAA,IAAF;AAAQM,QAAAA;AAAR,UAAmBD,MAAM,CAACE,IAAhC;AACA,aAAO,EAAE,GAAGF,MAAM,CAACE,IAAZ;AAAkBL,QAAAA,UAAU,EAAEL,aAAa,CAACG,IAAD,EAAOM,MAAP;AAA3C,OAAP;;AACJ,SAAKZ,SAAL;AAAmB;AACf,aAAO,EAAE,GAAGU,KAAL;AAAYH,QAAAA,GAAG,EAAEI,MAAM,CAACE;AAAxB,OAAP;;AACJ,SAAKZ,YAAL;AAAsB;AAClB,aAAOU,MAAM,CAACE,IAAd;;AACJ,SAAKX,UAAL;AAAoB;AAChB,aAAO,EAAE,GAAGQ,KAAL;AAAYH,QAAAA,GAAG,EAAEI,MAAM,CAACE;AAAxB,OAAP;;AACJ;AACI,aAAOH,KAAP;AAXR;AAaH;;AAED,eAAeZ,eAAe,CAAC;AAC3BW,EAAAA;AAD2B,CAAD,CAA9B;AAGA;AACA;AACA","sourcesContent":["/**\n * There are lots of reducer functions: \n *      They will return a new state according to old state and specified action\n */\nimport { combineReducers } from 'redux'\nimport { AUTH_SUCCESS, ERROR_MSG, RECEIVE_USER, RESET_USER } from './action-types'\n\nimport { getRedirectTo } from '../utils'\nconst initUser = {\n    username: '', // username\n    type: '',     // type\n    msg: '',      // error info\n    redirectTo: '', // need auto redirect router path\n}\n/**\n * \n */\nfunction user1(state = initUser, action) {\n    switch (action.type) {\n        case AUTH_SUCCESS: // data is user\n            const { type, header } = action.data\n            return { ...action.data, redirectTo: getRedirectTo(type, header) };\n        case ERROR_MSG:    // data is msg\n            return { ...state, msg: action.data };\n        case RECEIVE_USER:    // data is user\n            return action.data;\n        case RESET_USER:    // data is msg\n            return { ...state, msg: action.data };\n        default:\n            return state;\n    }\n}\n\nexport default combineReducers({\n    user1\n})\n/**\n * to export state's structure: {user1:{}}\n */\n"]},"metadata":{},"sourceType":"module"}