{"ast":null,"code":"import\"antd-mobile/es/badge/style\";import _Badge from\"antd-mobile/es/badge\";import _classCallCheck from\"/Users/stewardsun/Desktop/\\u6280\\u672F\\u6808/React\\u9879\\u76EE/Boss Recruitment/bob-recruitment-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/stewardsun/Desktop/\\u6280\\u672F\\u6808/React\\u9879\\u76EE/Boss Recruitment/bob-recruitment-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/stewardsun/Desktop/\\u6280\\u672F\\u6808/React\\u9879\\u76EE/Boss Recruitment/bob-recruitment-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/stewardsun/Desktop/\\u6280\\u672F\\u6808/React\\u9879\\u76EE/Boss Recruitment/bob-recruitment-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import\"antd-mobile/es/list/style\";import _List from\"antd-mobile/es/list\";import React,{Component}from'react';import{connect}from'react-redux';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Item=_List.Item;var Brief=Item.Brief;/**\n *  group chatMsgs by chat_id, get last item\n * 1. find out last msg for each chat, and store it by obj container {chat_id: lastMsgs}\n * 2. get all array of lastMsgs\n * 3. sort the array by (create_time desc)\n */function getLastMsgs(chatMsgs,userId){var lastMsgObjs={};chatMsgs.forEach(function(msg){if(msg.to===userId&&!msg.read){msg.unReadCount=1;// just is a flag: 0 or 1\n}else{msg.unReadCount=0;}var chatId=msg.chat_id;var lastMsg=lastMsgObjs[chatId];if(!lastMsg){lastMsgObjs[chatId]=msg;}else{// save already count the number\nvar unReadCount=lastMsg.unReadCount;if(msg.create_time>lastMsg.create_time){lastMsgObjs[chatId]=msg;}lastMsgObjs[chatId].unReadCount=unReadCount+msg.unReadCount;}});var lastMsgs=Object.values(lastMsgObjs);// lastMsgObjs is obj container, to get array with all values\nlastMsgs.sort(function(m1,m2){// if result < 0, put m1 first, if result = 0, don't do anything, if result > 0, put m2 first\nreturn m2.create_time-m1.create_time;});return lastMsgs;}var Message=/*#__PURE__*/function(_Component){_inherits(Message,_Component);var _super=_createSuper(Message);function Message(){_classCallCheck(this,Message);return _super.apply(this,arguments);}_createClass(Message,[{key:\"render\",value:function render(){var _this=this;var user=this.props.user;var _this$props$chat=this.props.chat,users=_this$props$chat.users,chatMsgs=_this$props$chat.chatMsgs;var lastMsgs=getLastMsgs(chatMsgs,user._id);return/*#__PURE__*/_jsx(_List,{style:{marginTop:50,marginBottom:40},children:lastMsgs.map(function(msg){var targetUserId=msg.to===user._id?msg.from:msg.to;var targetUser=users[targetUserId];return/*#__PURE__*/_jsxs(Item,{extra:/*#__PURE__*/_jsx(_Badge,{text:msg.unReadCount}),thumb:targetUser.header?require(\"../../assets/img/\".concat(targetUser.header,\".png\")).default:null,arrow:\"horizontal\",onClick:function onClick(){return _this.props.history.push(\"/chat/\".concat(targetUserId));},children:[msg.content,/*#__PURE__*/_jsx(Brief,{children:targetUser.username})]},msg._id);})});}}]);return Message;}(Component);export default connect(function(state){return{user:state.user1,chat:state.chat1};},{})(Message);","map":{"version":3,"sources":["/Users/stewardsun/Desktop/技术栈/React项目/Boss Recruitment/bob-recruitment-client/src/containers/message/message.jsx"],"names":["React","Component","connect","Item","Brief","getLastMsgs","chatMsgs","userId","lastMsgObjs","forEach","msg","to","read","unReadCount","chatId","chat_id","lastMsg","create_time","lastMsgs","Object","values","sort","m1","m2","Message","user","props","chat","users","_id","marginTop","marginBottom","map","targetUserId","from","targetUser","header","require","default","history","push","content","username","state","user1","chat1"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { List, Badge } from 'antd-mobile'\nconst Item = List.Item\nconst Brief = Item.Brief\n\n/**\n *  group chatMsgs by chat_id, get last item\n * 1. find out last msg for each chat, and store it by obj container {chat_id: lastMsgs}\n * 2. get all array of lastMsgs\n * 3. sort the array by (create_time desc)\n */\nfunction getLastMsgs(chatMsgs, userId) {\n    const lastMsgObjs = {};\n    chatMsgs.forEach(msg => {\n        if (msg.to === userId && !msg.read) {\n            msg.unReadCount = 1; // just is a flag: 0 or 1\n        } else {\n            msg.unReadCount = 0;\n        }\n        const chatId = msg.chat_id;\n        const lastMsg = lastMsgObjs[chatId];\n        if (!lastMsg) {\n            lastMsgObjs[chatId] = msg;\n        } else {\n            // save already count the number\n            const unReadCount = lastMsg.unReadCount;\n            if (msg.create_time > lastMsg.create_time) {\n                lastMsgObjs[chatId] = msg;\n            }\n            lastMsgObjs[chatId].unReadCount = unReadCount + msg.unReadCount;\n        }\n    })\n    let lastMsgs = Object.values(lastMsgObjs); // lastMsgObjs is obj container, to get array with all values\n    lastMsgs.sort((m1, m2) => { // if result < 0, put m1 first, if result = 0, don't do anything, if result > 0, put m2 first\n        return m2.create_time - m1.create_time\n    });\n    return lastMsgs;\n}\n\nclass Message extends Component {\n\n    render() {\n        const { user } = this.props;\n        const { users, chatMsgs } = this.props.chat;\n        const lastMsgs = getLastMsgs(chatMsgs, user._id);\n        return (\n            <List style={{ marginTop: 50, marginBottom: 40 }}>\n                {\n                    lastMsgs.map(msg => {\n                        const targetUserId = msg.to === user._id ? msg.from : msg.to;\n                        const targetUser = users[targetUserId];\n                        return (\n                            <Item\n                                key={msg._id}\n                                extra={<Badge text={msg.unReadCount} />}\n                                thumb={targetUser.header ? require(`../../assets/img/${targetUser.header}.png`).default : null}\n                                arrow='horizontal'\n                                onClick={() => this.props.history.push(`/chat/${targetUserId}`)}\n                            >\n                                {msg.content}\n                                <Brief>{targetUser.username}</Brief>\n                            </Item>\n                        )\n                    })\n                }\n            </List>\n        )\n    }\n}\nexport default connect(\n    state => ({ user: state.user1, chat: state.chat1 }),\n    {}\n)(Message)"]},"metadata":{},"sourceType":"module"}