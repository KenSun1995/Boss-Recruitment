{"ast":null,"code":"import\"antd-mobile/es/nav-bar/style\";import _NavBar from\"antd-mobile/es/nav-bar\";import _classCallCheck from\"/Users/stewardsun/Desktop/\\u6280\\u672F\\u6808/React\\u9879\\u76EE/Boss Recruitment/bob-recruitment-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/stewardsun/Desktop/\\u6280\\u672F\\u6808/React\\u9879\\u76EE/Boss Recruitment/bob-recruitment-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/stewardsun/Desktop/\\u6280\\u672F\\u6808/React\\u9879\\u76EE/Boss Recruitment/bob-recruitment-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/stewardsun/Desktop/\\u6280\\u672F\\u6808/React\\u9879\\u76EE/Boss Recruitment/bob-recruitment-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{Switch,Route,Redirect}from'react-router-dom';import{connect}from'react-redux';import Cookies from'js-cookie';// enable to operate front-end cookie object set()/remove()\nimport BossInfo from'../boss-info/boss-info';import ExpertInfo from'../expert-info/expert-info';import Boss from'../boss/boss';import Expert from'../expert/expert';import Message from'../message/message';import PersonalCenter from'../personal-center/personal-center';import NotFound from'../../components/not-found/not-found';import NavFooter from'../../components/nav-footer/nav-footer';import Chat from'../../containers/chat/chat';import{getRedirectTo}from'../../utils';import{getUser}from'../../redux/actions';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";/**\n * main component\n */var Main=/*#__PURE__*/function(_Component){_inherits(Main,_Component);var _super=_createSuper(Main);function Main(){var _this;_classCallCheck(this,Main);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.navList=[{path:'/boss',component:Boss,title:'Expert List',icon:'expert',text:'Expert'},{path:'/expert',component:Expert,title:'Boss List',icon:'boss',text:'Boss'},{path:'/message',component:Message,title:'Message List',icon:'message',text:'Message'},{path:'/personal-center',component:PersonalCenter,title:'User Center',icon:'personal',text:'Personal'}];return _this;}_createClass(Main,[{key:\"componentDidMount\",value:function componentDidMount(){// logged in, but currently no logged in, send request to get user info\nvar userId=Cookies.get('userId');var _id=this.props.user._id;if(userId&&!_id){// send async request\nthis.props.getUser();}}},{key:\"render\",value:function render(){// read userId from cookie, \n// if no, redirect to login page\n// if yes, get user status of redux, \n//      if there is no _id in user, return null (don't do any reaction)\n//      if there is _id in user, show relevant page, according to user's type and header to calculate a redirect path, and auto redirect it\nvar userId=Cookies.get('userId');if(!userId){return/*#__PURE__*/_jsx(Redirect,{to:'/login'});}var _this$props=this.props,user=_this$props.user,unReadCount=_this$props.unReadCount;if(!user._id){return null;}else{var _path=this.props.location.pathname;if(_path==='/'){_path=getRedirectTo(user.type,user.header);return/*#__PURE__*/_jsx(Redirect,{to:_path});}}var navList=this.navList;var path=this.props.location.pathname;var currentNav=navList.find(function(nav){// maybe true or false\nreturn nav.path===path;});if(currentNav){// decide to hide some item\nif(user.type==='boss'){navList[1].hide=true;}else{navList[0].hide=true;}}return/*#__PURE__*/_jsxs(\"div\",{children:[currentNav?/*#__PURE__*/_jsx(_NavBar,{className:\"sticky-header\",children:currentNav.title}):null,/*#__PURE__*/_jsxs(Switch,{children:[navList.map(function(nav){return/*#__PURE__*/_jsx(Route,{path:nav.path,component:nav.component});}),/*#__PURE__*/_jsx(Route,{path:\"/bossInfo\",component:BossInfo}),/*#__PURE__*/_jsx(Route,{path:\"/expertInfo\",component:ExpertInfo}),/*#__PURE__*/_jsx(Route,{path:\"/chat/:userId\",component:Chat}),/*#__PURE__*/_jsx(Route,{component:NotFound})]}),currentNav?/*#__PURE__*/_jsx(NavFooter,{navList:navList,unReadCount:unReadCount}):null]});}}]);return Main;}(Component);export default connect(function(state){return{user:state.user1,unReadCount:state.chat1.unReadCount};},{getUser:getUser})(Main);/**\n * need to implement login automatic\n * * 1. if cookie includes userId (login in the past but right now no), send request to get user, don't do any perform temporary\n * * 2. if cookie doesn't include userId, auto go into login page\n */ /**\n * if already login, if request /\n * * according to user's type and header to calculate a redirect path, and auto redirect it\n * *\n */","map":{"version":3,"sources":["/Users/stewardsun/Desktop/技术栈/React项目/Boss Recruitment/bob-recruitment-client/src/containers/main/main.jsx"],"names":["React","Component","Switch","Route","Redirect","connect","Cookies","BossInfo","ExpertInfo","Boss","Expert","Message","PersonalCenter","NotFound","NavFooter","Chat","getRedirectTo","getUser","Main","navList","path","component","title","icon","text","userId","get","_id","props","user","unReadCount","location","pathname","type","header","currentNav","find","nav","hide","map","state","user1","chat1"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Switch, Route, Redirect } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport Cookies from 'js-cookie' // enable to operate front-end cookie object set()/remove()\n\nimport BossInfo from '../boss-info/boss-info'\nimport ExpertInfo from '../expert-info/expert-info'\nimport Boss from '../boss/boss'\nimport Expert from '../expert/expert'\nimport Message from '../message/message'\nimport PersonalCenter from '../personal-center/personal-center'\nimport NotFound from '../../components/not-found/not-found'\nimport NavFooter from '../../components/nav-footer/nav-footer'\nimport Chat from '../../containers/chat/chat'\nimport { getRedirectTo } from '../../utils'\nimport { getUser } from '../../redux/actions'\nimport { NavBar } from 'antd-mobile'\n/**\n * main component\n */\nclass Main extends Component {\n\n    // component class and object\n    // add attributes for component object\n    navList = [\n        {\n            path: '/boss',\n            component: Boss,\n            title: 'Expert List',\n            icon: 'expert',\n            text: 'Expert',\n        },\n        {\n            path: '/expert',\n            component: Expert,\n            title: 'Boss List',\n            icon: 'boss',\n            text: 'Boss',\n        },\n        {\n            path: '/message',\n            component: Message,\n            title: 'Message List',\n            icon: 'message',\n            text: 'Message',\n        },\n        {\n            path: '/personal-center',\n            component: PersonalCenter,\n            title: 'User Center',\n            icon: 'personal',\n            text: 'Personal',\n        }\n    ]\n\n    componentDidMount() {\n        // logged in, but currently no logged in, send request to get user info\n        const userId = Cookies.get('userId');\n        const { _id } = this.props.user;\n        if (userId && !_id) {\n            // send async request\n            this.props.getUser();\n        }\n    }\n\n    render() {\n        // read userId from cookie, \n        // if no, redirect to login page\n        // if yes, get user status of redux, \n        //      if there is no _id in user, return null (don't do any reaction)\n        //      if there is _id in user, show relevant page, according to user's type and header to calculate a redirect path, and auto redirect it\n        const userId = Cookies.get('userId');\n        if (!userId) {\n            return <Redirect to={'/login'} />\n        }\n        const { user, unReadCount } = this.props;\n        if (!user._id) {\n            return null;\n        } else {\n            let path = this.props.location.pathname;\n            if (path === '/') {\n                path = getRedirectTo(user.type, user.header);\n                return <Redirect to={path} />\n            }\n        }\n\n        const { navList } = this;\n        const path = this.props.location.pathname;\n        const currentNav = navList.find((nav) => { // maybe true or false\n            return nav.path === path;\n        });\n\n        if (currentNav) {\n            // decide to hide some item\n            if (user.type === 'boss') {\n                navList[1].hide = true;\n            } else {\n                navList[0].hide = true;\n            }\n        }\n\n        return (\n            <div>\n                {currentNav ? <NavBar className='sticky-header'>{currentNav.title}</NavBar> : null}\n                <Switch>\n                    {\n                        navList.map(nav => <Route path={nav.path} component={nav.component} />)\n                    }\n                    <Route path='/bossInfo' component={BossInfo} />\n                    <Route path='/expertInfo' component={ExpertInfo} />\n                    <Route path='/chat/:userId' component={Chat} />\n                    <Route component={NotFound} />\n                </Switch>\n                {currentNav ? <NavFooter navList={navList} unReadCount={unReadCount} /> : null}\n            </div>\n        )\n    }\n}\n\nexport default connect(\n    state => ({ user: state.user1, unReadCount: state.chat1.unReadCount }),\n    { getUser }\n)(Main)\n\n/**\n * need to implement login automatic\n * * 1. if cookie includes userId (login in the past but right now no), send request to get user, don't do any perform temporary\n * * 2. if cookie doesn't include userId, auto go into login page\n */\n/**\n * if already login, if request /\n * * according to user's type and header to calculate a redirect path, and auto redirect it\n * *\n */"]},"metadata":{},"sourceType":"module"}