{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { getComputedStyle } from '../utils';\n\nvar SvgDraw = /*#__PURE__*/function () {\n  function SvgDraw(value, key) {\n    var _this = this;\n\n    _classCallCheck(this, SvgDraw);\n\n    this.value = value;\n    this.key = key;\n    this.style = {};\n    this.start = {};\n    this.startAt = {};\n    this.length = 0;\n\n    this.getAnimStart = function () {\n      var target = _this.target,\n          startAt = _this.startAt,\n          key = _this.key;\n\n      if (!target) {\n        return;\n      }\n\n      if (!_this.computedStyle) {\n        _this.computedStyle = getComputedStyle(target);\n      }\n\n      var computedStyle = _this.computedStyle;\n      var tagName = target.tagName;\n\n      var getAttribute = function getAttribute(str) {\n        return target.getAttribute(str);\n      };\n\n      switch (tagName) {\n        case 'circle':\n          _this.length = Math.PI * 2 * getAttribute('r');\n          break;\n\n        case 'line':\n          _this.length = _this.getLineLength(getAttribute('x1'), getAttribute('y1'), getAttribute('x2'), getAttribute('y2'));\n          break;\n\n        case 'polyline':\n        case 'polygon':\n          _this.length = _this.getPolyLength(tagName);\n          break;\n\n        case 'ellipse':\n          _this.length = _this.getEllipseLength();\n          break;\n\n        case 'rect':\n          _this.length = getAttribute('width') * 2 + getAttribute('height') * 2;\n          break;\n\n        case 'path':\n          _this.length = target.getTotalLength();\n          break;\n\n        default:\n          throw new Error('The label is not a label in the SVG.');\n      }\n\n      _this.length = parseFloat(_this.length.toFixed(3));\n      var strokeDasharray;\n      var strokeDashoffset;\n\n      if (startAt[key] || startAt[key] === 0) {\n        strokeDasharray = _this.setVars(startAt[key]);\n        strokeDashoffset = -strokeDasharray.start;\n      } else {\n        strokeDasharray = computedStyle.strokeDasharray === 'none' || !computedStyle.strokeDasharray ? '100% 100%' : computedStyle.strokeDasharray;\n        strokeDashoffset = parseFloat(computedStyle.strokeDashoffset);\n        strokeDasharray = strokeDasharray.split(' ')[0].replace(/\\,/i, '');\n        strokeDasharray = strokeDasharray.indexOf('%') >= 0 ? parseFloat(strokeDasharray) / 100 * _this.length : parseFloat(strokeDasharray);\n        strokeDasharray = _this.setVars(\"\".concat(-strokeDashoffset, \" \").concat(strokeDasharray - strokeDashoffset));\n      }\n\n      _this.start.strokeDasharray = strokeDasharray;\n      _this.start.strokeDashoffset = strokeDashoffset;\n      _this.value = _this.setVars(_this.value);\n      return _this.start;\n    };\n\n    this.render = function (r) {\n      var value = _this.value,\n          start = _this.start,\n          length = _this.length;\n      var s = start.strokeDasharray,\n          sdf = start.strokeDashoffset;\n      var v = s.end - s.start + (value.end - s.end - (value.start - s.start)) * r;\n      return {\n        strokeDasharray: \"\".concat(v, \"px, \").concat(length, \"px\"),\n        strokeDashoffset: -((value.start + sdf) * r - sdf)\n      };\n    };\n  }\n\n  _createClass(SvgDraw, [{\n    key: \"setVars\",\n    value: function setVars(value) {\n      var v = {\n        start: 0\n      };\n\n      if (typeof value === 'number') {\n        v.end = value;\n        return v;\n      }\n\n      var data = value.split(' ');\n\n      if (data.length > 1) {\n        v.start = data[0].indexOf('%') >= 0 ? parseFloat(data[0]) / 100 * this.length : parseFloat(data[0]);\n        v.end = data[1].indexOf('%') >= 0 ? parseFloat(data[1]) / 100 * this.length : parseFloat(data[1]);\n      } else if (parseFloat(value)) {\n        v.end = value.indexOf('%') >= 0 ? parseFloat(value) / 100 * this.length : parseFloat(value);\n      } else {\n        throw new Error(\"SVGDraw data[\".concat(value, \"] error.\"));\n      }\n\n      return v;\n    }\n  }, {\n    key: \"getPolyLength\",\n    value: function getPolyLength(name) {\n      var _this2 = this; // .match(/(?:(-|-=|\\+=)?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[0-9]/gi)\n\n\n      var pointsArray = [];\n      (this.target.getAttribute('points') || '').split(/[\\s+|,]/).forEach(function (item, i) {\n        var arr = pointsArray[Math.floor(i / 2)] || [];\n        arr.push(parseFloat(item));\n\n        if (!(i % 2)) {\n          pointsArray.push(arr);\n        }\n      });\n\n      if (name === 'polygon') {\n        pointsArray.push(pointsArray[0]);\n      }\n\n      var length = 0;\n      pointsArray.forEach(function (item, i) {\n        if (i < pointsArray.length - 1) {\n          var nextPoint = pointsArray[i + 1];\n          length += _this2.getLineLength(item[0], item[1], nextPoint[0], nextPoint[1]);\n        }\n      });\n      return length;\n    }\n  }, {\n    key: \"getEllipseLength\",\n    value: function getEllipseLength() {\n      var rx = parseFloat(this.target.getAttribute('rx'));\n      var ry = parseFloat(this.target.getAttribute('ry'));\n\n      if (!rx || !ry) {\n        throw new Error(\"ellipse rx or ry error.\");\n      }\n\n      return Math.PI * (3 * (rx + ry) - Math.sqrt((3 * rx + ry) * (3 * ry + rx)));\n    }\n  }, {\n    key: \"getLineLength\",\n    value: function getLineLength(x1, y1, x2, y2) {\n      var x = parseFloat(x2) - parseFloat(x1);\n      var y = parseFloat(y2) - parseFloat(y1);\n      return Math.sqrt(x * x + y * y);\n    }\n  }]);\n\n  return SvgDraw;\n}();\n\nexport { SvgDraw as default };\nSvgDraw.key = 'style';\nSvgDraw.className = 'SVGDraw';","map":{"version":3,"sources":["/Users/stewardsun/Desktop/技术栈/React项目/Boss Recruitment/bob-recruitment-client/node_modules/tween-one/es/plugins/SvgDrawPlugin.js"],"names":["_classCallCheck","_createClass","getComputedStyle","SvgDraw","value","key","_this","style","start","startAt","length","getAnimStart","target","computedStyle","tagName","getAttribute","str","Math","PI","getLineLength","getPolyLength","getEllipseLength","getTotalLength","Error","parseFloat","toFixed","strokeDasharray","strokeDashoffset","setVars","split","replace","indexOf","concat","render","r","s","sdf","v","end","data","name","_this2","pointsArray","forEach","item","i","arr","floor","push","nextPoint","rx","ry","sqrt","x1","y1","x2","y2","x","y","default","className"],"mappings":"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","sourcesContent":["import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { getComputedStyle } from '../utils';\n\nvar SvgDraw = /*#__PURE__*/function () {\n  function SvgDraw(value, key) {\n    var _this = this;\n\n    _classCallCheck(this, SvgDraw);\n\n    this.value = value;\n    this.key = key;\n    this.style = {};\n    this.start = {};\n    this.startAt = {};\n    this.length = 0;\n\n    this.getAnimStart = function () {\n      var target = _this.target,\n          startAt = _this.startAt,\n          key = _this.key;\n\n      if (!target) {\n        return;\n      }\n\n      if (!_this.computedStyle) {\n        _this.computedStyle = getComputedStyle(target);\n      }\n\n      var computedStyle = _this.computedStyle;\n      var tagName = target.tagName;\n\n      var getAttribute = function getAttribute(str) {\n        return target.getAttribute(str);\n      };\n\n      switch (tagName) {\n        case 'circle':\n          _this.length = Math.PI * 2 * getAttribute('r');\n          break;\n\n        case 'line':\n          _this.length = _this.getLineLength(getAttribute('x1'), getAttribute('y1'), getAttribute('x2'), getAttribute('y2'));\n          break;\n\n        case 'polyline':\n        case 'polygon':\n          _this.length = _this.getPolyLength(tagName);\n          break;\n\n        case 'ellipse':\n          _this.length = _this.getEllipseLength();\n          break;\n\n        case 'rect':\n          _this.length = getAttribute('width') * 2 + getAttribute('height') * 2;\n          break;\n\n        case 'path':\n          _this.length = target.getTotalLength();\n          break;\n\n        default:\n          throw new Error('The label is not a label in the SVG.');\n      }\n\n      _this.length = parseFloat(_this.length.toFixed(3));\n      var strokeDasharray;\n      var strokeDashoffset;\n\n      if (startAt[key] || startAt[key] === 0) {\n        strokeDasharray = _this.setVars(startAt[key]);\n        strokeDashoffset = -strokeDasharray.start;\n      } else {\n        strokeDasharray = computedStyle.strokeDasharray === 'none' || !computedStyle.strokeDasharray ? '100% 100%' : computedStyle.strokeDasharray;\n        strokeDashoffset = parseFloat(computedStyle.strokeDashoffset);\n        strokeDasharray = strokeDasharray.split(' ')[0].replace(/\\,/i, '');\n        strokeDasharray = strokeDasharray.indexOf('%') >= 0 ? parseFloat(strokeDasharray) / 100 * _this.length : parseFloat(strokeDasharray);\n        strokeDasharray = _this.setVars(\"\".concat(-strokeDashoffset, \" \").concat(strokeDasharray - strokeDashoffset));\n      }\n\n      _this.start.strokeDasharray = strokeDasharray;\n      _this.start.strokeDashoffset = strokeDashoffset;\n      _this.value = _this.setVars(_this.value);\n      return _this.start;\n    };\n\n    this.render = function (r) {\n      var value = _this.value,\n          start = _this.start,\n          length = _this.length;\n      var s = start.strokeDasharray,\n          sdf = start.strokeDashoffset;\n      var v = s.end - s.start + (value.end - s.end - (value.start - s.start)) * r;\n      return {\n        strokeDasharray: \"\".concat(v, \"px, \").concat(length, \"px\"),\n        strokeDashoffset: -((value.start + sdf) * r - sdf)\n      };\n    };\n  }\n\n  _createClass(SvgDraw, [{\n    key: \"setVars\",\n    value: function setVars(value) {\n      var v = {\n        start: 0\n      };\n\n      if (typeof value === 'number') {\n        v.end = value;\n        return v;\n      }\n\n      var data = value.split(' ');\n\n      if (data.length > 1) {\n        v.start = data[0].indexOf('%') >= 0 ? parseFloat(data[0]) / 100 * this.length : parseFloat(data[0]);\n        v.end = data[1].indexOf('%') >= 0 ? parseFloat(data[1]) / 100 * this.length : parseFloat(data[1]);\n      } else if (parseFloat(value)) {\n        v.end = value.indexOf('%') >= 0 ? parseFloat(value) / 100 * this.length : parseFloat(value);\n      } else {\n        throw new Error(\"SVGDraw data[\".concat(value, \"] error.\"));\n      }\n\n      return v;\n    }\n  }, {\n    key: \"getPolyLength\",\n    value: function getPolyLength(name) {\n      var _this2 = this;\n\n      // .match(/(?:(-|-=|\\+=)?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[0-9]/gi)\n      var pointsArray = [];\n      (this.target.getAttribute('points') || '').split(/[\\s+|,]/).forEach(function (item, i) {\n        var arr = pointsArray[Math.floor(i / 2)] || [];\n        arr.push(parseFloat(item));\n\n        if (!(i % 2)) {\n          pointsArray.push(arr);\n        }\n      });\n\n      if (name === 'polygon') {\n        pointsArray.push(pointsArray[0]);\n      }\n\n      var length = 0;\n      pointsArray.forEach(function (item, i) {\n        if (i < pointsArray.length - 1) {\n          var nextPoint = pointsArray[i + 1];\n          length += _this2.getLineLength(item[0], item[1], nextPoint[0], nextPoint[1]);\n        }\n      });\n      return length;\n    }\n  }, {\n    key: \"getEllipseLength\",\n    value: function getEllipseLength() {\n      var rx = parseFloat(this.target.getAttribute('rx'));\n      var ry = parseFloat(this.target.getAttribute('ry'));\n\n      if (!rx || !ry) {\n        throw new Error(\"ellipse rx or ry error.\");\n      }\n\n      return Math.PI * (3 * (rx + ry) - Math.sqrt((3 * rx + ry) * (3 * ry + rx)));\n    }\n  }, {\n    key: \"getLineLength\",\n    value: function getLineLength(x1, y1, x2, y2) {\n      var x = parseFloat(x2) - parseFloat(x1);\n      var y = parseFloat(y2) - parseFloat(y1);\n      return Math.sqrt(x * x + y * y);\n    }\n  }]);\n\n  return SvgDraw;\n}();\n\nexport { SvgDraw as default };\nSvgDraw.key = 'style';\nSvgDraw.className = 'SVGDraw';"]},"metadata":{},"sourceType":"module"}