{"ast":null,"code":"var _jsxFileName = \"/Users/stewardsun/Desktop/\\u6280\\u672F\\u6808/React\\u9879\\u76EE/Boss Recruitment/bob-recruitment-client/src/containers/main/main.jsx\";\nimport React, { Component } from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Cookies from 'js-cookie'; // enable to operate front-end cookie object set()/remove()\n\nimport BossInfo from '../boss-info/boss-info';\nimport ExpertInfo from '../expert-info/expert-info';\nimport { getRedirectTo } from '../../utils';\n/**\n * main component\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Main extends Component {\n  render() {\n    // read userId from cookie, \n    // if no, redirect to login page\n    // if yes, get user status of redux, \n    //      if there is no _id in user, return null (don't do any reaction)\n    //      if there is _id in user, show relevant page, according to user's type and header to calculate a redirect path, and auto redirect it\n    const userId = Cookies.get('userId');\n\n    if (!userId) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: '/login'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 20\n      }, this);\n    }\n\n    const {\n      user\n    } = this.props;\n\n    if (!user._id) {\n      return null;\n    } else {\n      const path = this.props.location.pathname;\n\n      if (path === '/') {\n        getRedirectTo(user.type, user.header);\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/bossInfo\",\n          component: BossInfo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/expertInfo\",\n          component: ExpertInfo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default connect(state => ({\n  user: state.user1\n}))(Main);\n/**\n * need to implement login automatic\n * * 1. if cookie includes userId, send request to get user, don't do any perform temporary\n * * 2. if cookie doesn't include userId, auto go into login page\n */\n\n/**\n * if already login, if request /\n * * according to user's type and header to calculate a redirect path, and auto redirect it\n * *\n */","map":{"version":3,"sources":["/Users/stewardsun/Desktop/技术栈/React项目/Boss Recruitment/bob-recruitment-client/src/containers/main/main.jsx"],"names":["React","Component","Switch","Route","Redirect","connect","Cookies","BossInfo","ExpertInfo","getRedirectTo","Main","render","userId","get","user","props","_id","path","location","pathname","type","header","state","user1"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,QAAxB,QAAwC,kBAAxC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,OAAP,MAAoB,WAApB,C,CAAgC;;AAEhC,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,UAAP,MAAuB,4BAAvB;AACA,SAASC,aAAT,QAA8B,aAA9B;AACA;AACA;AACA;;;;AACA,MAAMC,IAAN,SAAmBT,SAAnB,CAA6B;AACzBU,EAAAA,MAAM,GAAG;AACL;AACA;AACA;AACA;AACA;AACA,UAAMC,MAAM,GAAGN,OAAO,CAACO,GAAR,CAAY,QAAZ,CAAf;;AACA,QAAI,CAACD,MAAL,EAAa;AACT,0BAAO,QAAC,QAAD;AAAU,QAAA,EAAE,EAAE;AAAd;AAAA;AAAA;AAAA;AAAA,cAAP;AACH;;AACD,UAAM;AAAEE,MAAAA;AAAF,QAAW,KAAKC,KAAtB;;AACA,QAAI,CAACD,IAAI,CAACE,GAAV,EAAe;AACX,aAAO,IAAP;AACH,KAFD,MAEO;AACH,YAAMC,IAAI,GAAG,KAAKF,KAAL,CAAWG,QAAX,CAAoBC,QAAjC;;AACA,UAAIF,IAAI,KAAK,GAAb,EAAkB;AACdR,QAAAA,aAAa,CAACK,IAAI,CAACM,IAAN,EAAYN,IAAI,CAACO,MAAjB,CAAb;AACH;AACJ;;AAGD,wBACI;AAAA,6BACI,QAAC,MAAD;AAAA,gCACI,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,WAAZ;AAAwB,UAAA,SAAS,EAAEd;AAAnC;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,aAAZ;AAA0B,UAAA,SAAS,EAAEC;AAArC;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAQH;;AA9BwB;;AAiC7B,eAAeH,OAAO,CAClBiB,KAAK,KAAK;AAAER,EAAAA,IAAI,EAAEQ,KAAK,CAACC;AAAd,CAAL,CADa,CAAP,CAEbb,IAFa,CAAf;AAIA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component } from 'react'\nimport { Switch, Route, Redirect } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport Cookies from 'js-cookie' // enable to operate front-end cookie object set()/remove()\n\nimport BossInfo from '../boss-info/boss-info'\nimport ExpertInfo from '../expert-info/expert-info'\nimport { getRedirectTo } from '../../utils'\n/**\n * main component\n */\nclass Main extends Component {\n    render() {\n        // read userId from cookie, \n        // if no, redirect to login page\n        // if yes, get user status of redux, \n        //      if there is no _id in user, return null (don't do any reaction)\n        //      if there is _id in user, show relevant page, according to user's type and header to calculate a redirect path, and auto redirect it\n        const userId = Cookies.get('userId');\n        if (!userId) {\n            return <Redirect to={'/login'} />\n        }\n        const { user } = this.props;\n        if (!user._id) {\n            return null;\n        } else {\n            const path = this.props.location.pathname;\n            if (path === '/') {\n                getRedirectTo(user.type, user.header);\n            }\n        }\n\n\n        return (\n            <div>\n                <Switch>\n                    <Route path='/bossInfo' component={BossInfo} />\n                    <Route path='/expertInfo' component={ExpertInfo} />\n                </Switch>\n            </div>\n        )\n    }\n}\n\nexport default connect(\n    state => ({ user: state.user1 })\n)(Main)\n\n/**\n * need to implement login automatic\n * * 1. if cookie includes userId, send request to get user, don't do any perform temporary\n * * 2. if cookie doesn't include userId, auto go into login page\n */\n/**\n * if already login, if request /\n * * according to user's type and header to calculate a redirect path, and auto redirect it\n * *\n */"]},"metadata":{},"sourceType":"module"}