{"ast":null,"code":"/**\n * There are lots of action creator:\n *      synchronized action\n *      asynchronized action\n */\nimport io from 'socket.io-client';\nimport { reqRegister, reqLogin, reqUpdateUser, reqUser, reqUserList, reqChatMsgList, reqReadMsg } from '../api';\nimport { AUTH_SUCCESS, ERROR_MSG, RECEIVE_USER, RESET_USER, RECEIVE_USER_LIST, RECEIVE_MSG_LIST, RECEIVE_MSG, MSG_READ } from './action-types';\n/**\n * single example obj\n * 1. before creating obj: check obj is created or not, only create it if not\n * 2. after creating obj: save obj\n */\n\nfunction initIO(dispatch, userId) {\n  if (!io.socket) {\n    // connect server, get socket obj\n    io.socket = io('ws://localhost:4000', {\n      transports: ['websocket']\n    }); // bind 'receiveMessage' monitor, to receive msg from server\n\n    io.socket.on('receiveMsg', function (chatMsg) {\n      console.log('Browser received msg:', chatMsg); // only chatMsg is related to current user, to dispatch\n\n      if (userId === chatMsg.from || userId === chatMsg.to) {\n        dispatch(receiveMsg(chatMsg, userId));\n      }\n    });\n  }\n}\n/**\n * async get msg list data\n */\n\n\nasync function getMsgList(dispatch, userId) {\n  initIO(dispatch, userId);\n  const response = await reqChatMsgList();\n  const result = response.data;\n\n  if (result !== 0) {\n    const {\n      users,\n      chatMsgs\n    } = result.data; // dispatch action\n\n    dispatch(receiveMsgList({\n      users,\n      chatMsgs,\n      userId\n    }));\n  }\n}\n/**\n * async send msg in chat\n */\n\n\nexport const sendMsg = _ref => {\n  let {\n    from,\n    to,\n    content\n  } = _ref;\n  return dispatch => {\n    console.log('send msg:', {\n      from,\n      to,\n      content\n    });\n    io.socket.emit('sendMsg', {\n      from,\n      to,\n      content\n    });\n  };\n};\n/**\n * auth success sync action\n */\n\nconst authSuccess = user => ({\n  type: AUTH_SUCCESS,\n  data: user\n});\n/**\n * msg info sync action\n */\n\n\nconst errorMsg = msg => ({\n  type: ERROR_MSG,\n  data: msg\n});\n/**\n * receive  user sync action\n */\n\n\nconst receiveUser = user => ({\n  type: RECEIVE_USER,\n  data: user\n});\n/**\n * reset user sync action\n */\n\n\nexport const resetUser = msg => ({\n  type: RESET_USER,\n  data: msg\n});\n/**\n * received user list sync action\n */\n\nconst receivedUserList = userList => ({\n  type: RECEIVE_USER_LIST,\n  data: userList\n});\n/**\n * received msg list sync action\n */\n\n\nconst receiveMsgList = _ref2 => {\n  let {\n    users,\n    chatMsgs,\n    userId\n  } = _ref2;\n  return {\n    type: RECEIVE_MSG_LIST,\n    data: {\n      users,\n      chatMsgs,\n      userId\n    }\n  };\n};\n/**\n * received one msg sync action\n */\n\n\nconst receiveMsg = (chatMsg, userId) => ({\n  type: RECEIVE_MSG,\n  data: {\n    chatMsg,\n    userId\n  }\n});\n/**\n * read msg read\n */\n\n\nconst msgRead = _ref3 => {\n  let {\n    count,\n    from,\n    to\n  } = _ref3;\n  return {\n    type: MSG_READ,\n    data: {\n      count,\n      from,\n      to\n    }\n  };\n};\n/**\n * register\n */\n\n\nexport const register = user => {\n  const {\n    username,\n    password,\n    password2,\n    type\n  } = user; // do validation before send request\n\n  if (!username) {\n    return errorMsg('you have to enter username');\n  }\n\n  if (password !== password2) {\n    return errorMsg('two time passwords should be the same');\n  }\n\n  if (!password || !password2) {\n    return errorMsg('passwords must be entered');\n  }\n\n  if (password.length < 8) {\n    return errorMsg('the length of password should more than 8');\n  }\n\n  var reg = /^(?=.*\\d)(?=.*[!@#$%^&*])(?=.*[a-z])(?=.*[A-Z]).{8,}$/;\n\n  if (!reg.test(password)) {\n    return errorMsg('passwords miss at least a symbol, upper and lower case letters and a number');\n  } // form data is valid\n\n\n  return async dispatch => {\n    // send register asyn request\n    const response = await reqRegister({\n      username,\n      password,\n      type\n    });\n    const result = response.data;\n\n    if (result.code === 0) {\n      // success\n      getMsgList(dispatch, result.data._id); // dispatch success action\n\n      dispatch(authSuccess(result.data));\n    } else {\n      // fail\n      // dispatch fail action\n      dispatch(errorMsg(result.msg));\n    }\n  };\n};\n/**\n * login\n */\n\nexport const login = user => {\n  const {\n    username,\n    password\n  } = user; // do validation before send request\n\n  if (!username) {\n    return errorMsg('you have to enter username');\n  }\n\n  if (!password) {\n    return errorMsg('password should be the entering');\n  }\n\n  return async dispatch => {\n    // send login asyn request\n    const response = await reqLogin(user);\n    const result = response.data;\n\n    if (result.code === 0) {\n      // success\n      getMsgList(dispatch, result.data._id); // dispatch success action\n\n      dispatch(authSuccess(result.data));\n    } else {\n      // fail\n      // dispatch fail action\n      dispatch(errorMsg(result.msg));\n    }\n  };\n};\n/**\n * update\n */\n\nexport const update = user => {\n  return async dispatch => {\n    const response = await reqUpdateUser(user);\n    const result = response.data;\n\n    if (result.code === 0) {\n      // success\n      dispatch(receiveUser(result.data));\n    } else {\n      // fail\n      dispatch(resetUser(result.msg));\n    }\n  };\n};\n/**\n * get userInfo according to cookie\n */\n\nexport const getUser = () => {\n  return async dispatch => {\n    const response = await reqUser();\n    const result = response.data;\n\n    if (result.code === 0) {\n      getMsgList(dispatch, result.data._id);\n      dispatch(receiveUser(result.data));\n    } else {\n      dispatch(resetUser(result.msg));\n    }\n  };\n};\n/**\n * get userList async action\n */\n\nexport const getUserList = type => {\n  return async dispatch => {\n    const response = await reqUserList(type);\n    const result = response.data;\n\n    if (result.code === 0) {\n      dispatch(receivedUserList(result.data));\n    }\n  };\n};\n/**\n * read un read msg\n */\n\nexport const readMsg = (from, to) => {\n  return async dispatch => {\n    const response = await reqReadMsg(from);\n    const result = response.data;\n\n    if (result.code === 0) {\n      const count = result.data;\n      dispatch(msgRead({\n        count,\n        from,\n        to\n      }));\n    }\n  };\n};","map":{"version":3,"sources":["/Users/stewardsun/Desktop/技术栈/React项目/Boss Recruitment/bob-recruitment-client/src/redux/actions.js"],"names":["io","reqRegister","reqLogin","reqUpdateUser","reqUser","reqUserList","reqChatMsgList","reqReadMsg","AUTH_SUCCESS","ERROR_MSG","RECEIVE_USER","RESET_USER","RECEIVE_USER_LIST","RECEIVE_MSG_LIST","RECEIVE_MSG","MSG_READ","initIO","dispatch","userId","socket","transports","on","chatMsg","console","log","from","to","receiveMsg","getMsgList","response","result","data","users","chatMsgs","receiveMsgList","sendMsg","content","emit","authSuccess","user","type","errorMsg","msg","receiveUser","resetUser","receivedUserList","userList","msgRead","count","register","username","password","password2","length","reg","test","code","_id","login","update","getUser","getUserList","readMsg"],"mappings":"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","sourcesContent":["/**\n * There are lots of action creator:\n *      synchronized action\n *      asynchronized action\n */\nimport io from 'socket.io-client'\nimport { reqRegister, reqLogin, reqUpdateUser, reqUser, reqUserList, reqChatMsgList, reqReadMsg } from '../api'\nimport { AUTH_SUCCESS, ERROR_MSG, RECEIVE_USER, RESET_USER, RECEIVE_USER_LIST, RECEIVE_MSG_LIST, RECEIVE_MSG, MSG_READ } from './action-types'\n/**\n * single example obj\n * 1. before creating obj: check obj is created or not, only create it if not\n * 2. after creating obj: save obj\n */\nfunction initIO(dispatch, userId) {\n    if (!io.socket) {\n        // connect server, get socket obj\n        io.socket = io('ws://localhost:4000', { transports: ['websocket'] })\n        // bind 'receiveMessage' monitor, to receive msg from server\n        io.socket.on('receiveMsg', function (chatMsg) {\n            console.log('Browser received msg:', chatMsg);\n            // only chatMsg is related to current user, to dispatch\n            if (userId === chatMsg.from || userId === chatMsg.to) {\n                dispatch(receiveMsg(chatMsg, userId));\n            }\n        })\n    }\n}\n/**\n * async get msg list data\n */\nasync function getMsgList(dispatch, userId) {\n    initIO(dispatch, userId);\n    const response = await reqChatMsgList();\n    const result = response.data;\n    if (result !== 0) {\n        const { users, chatMsgs } = result.data;\n        // dispatch action\n        dispatch(receiveMsgList({ users, chatMsgs, userId }));\n    }\n}\n/**\n * async send msg in chat\n */\nexport const sendMsg = ({ from, to, content }) => {\n    return dispatch => {\n        console.log('send msg:', { from, to, content });\n        io.socket.emit('sendMsg', { from, to, content })\n    }\n}\n/**\n * auth success sync action\n */\nconst authSuccess = (user) => ({ type: AUTH_SUCCESS, data: user });\n/**\n * msg info sync action\n */\nconst errorMsg = (msg) => ({ type: ERROR_MSG, data: msg });\n/**\n * receive  user sync action\n */\nconst receiveUser = (user) => ({ type: RECEIVE_USER, data: user });\n/**\n * reset user sync action\n */\nexport const resetUser = (msg) => ({ type: RESET_USER, data: msg });\n/**\n * received user list sync action\n */\nconst receivedUserList = (userList) => ({ type: RECEIVE_USER_LIST, data: userList });\n/**\n * received msg list sync action\n */\nconst receiveMsgList = ({ users, chatMsgs, userId }) => ({ type: RECEIVE_MSG_LIST, data: { users, chatMsgs, userId } });\n/**\n * received one msg sync action\n */\nconst receiveMsg = (chatMsg, userId) => ({ type: RECEIVE_MSG, data: { chatMsg, userId } });\n/**\n * read msg read\n */\nconst msgRead = ({ count, from, to }) => ({ type: MSG_READ, data: { count, from, to } });\n\n\n/**\n * register\n */\nexport const register = (user) => {\n    const { username, password, password2, type } = user;\n    // do validation before send request\n    if (!username) {\n        return errorMsg('you have to enter username');\n    }\n    if (password !== password2) {\n        return errorMsg('two time passwords should be the same');\n    }\n    if (!password || !password2) {\n        return errorMsg('passwords must be entered');\n    }\n    if (password.length < 8) {\n        return errorMsg('the length of password should more than 8');\n    }\n    var reg = /^(?=.*\\d)(?=.*[!@#$%^&*])(?=.*[a-z])(?=.*[A-Z]).{8,}$/;\n    if (!reg.test(password)) {\n        return errorMsg('passwords miss at least a symbol, upper and lower case letters and a number');\n    }\n\n    // form data is valid\n    return async dispatch => {\n        // send register asyn request\n        const response = await reqRegister({ username, password, type });\n        const result = response.data;\n        if (result.code === 0) { // success\n            getMsgList(dispatch, result.data._id);\n            // dispatch success action\n            dispatch(authSuccess(result.data));\n        } else { // fail\n            // dispatch fail action\n            dispatch(errorMsg(result.msg));\n        }\n    }\n}\n\n/**\n * login\n */\nexport const login = (user) => {\n    const { username, password } = user;\n    // do validation before send request\n    if (!username) {\n        return errorMsg('you have to enter username');\n    }\n    if (!password) {\n        return errorMsg('password should be the entering');\n    }\n    return async dispatch => {\n        // send login asyn request\n        const response = await reqLogin(user);\n        const result = response.data;\n        if (result.code === 0) { // success\n            getMsgList(dispatch, result.data._id);\n            // dispatch success action\n            dispatch(authSuccess(result.data));\n        } else { // fail\n            // dispatch fail action\n            dispatch(errorMsg(result.msg));\n        }\n    }\n}\n\n/**\n * update\n */\nexport const update = (user) => {\n    return async dispatch => {\n        const response = await reqUpdateUser(user);\n        const result = response.data;\n        if (result.code === 0) { // success\n            dispatch(receiveUser(result.data));\n        } else { // fail\n            dispatch(resetUser(result.msg));\n        }\n    }\n}\n\n/**\n * get userInfo according to cookie\n */\nexport const getUser = () => {\n    return async dispatch => {\n        const response = await reqUser();\n        const result = response.data;\n        if (result.code === 0) {\n            getMsgList(dispatch, result.data._id);\n            dispatch(receiveUser(result.data));\n        } else {\n            dispatch(resetUser(result.msg));\n        }\n    }\n}\n\n/**\n * get userList async action\n */\nexport const getUserList = (type) => {\n    return async dispatch => {\n        const response = await reqUserList(type);\n        const result = response.data;\n        if (result.code === 0) {\n            dispatch(receivedUserList(result.data));\n        }\n    }\n}\n\n/**\n * read un read msg\n */\nexport const readMsg = (from, to) => {\n    return async dispatch => {\n        const response = await reqReadMsg(from);\n        const result = response.data;\n        if (result.code === 0) {\n            const count = result.data;\n            dispatch(msgRead({ count, from, to }));\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}